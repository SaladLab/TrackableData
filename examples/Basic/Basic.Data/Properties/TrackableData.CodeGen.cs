// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.Serialization;
using TrackableData;

#region Basic.Data.IUserData

namespace Basic.Data
{
    public class TrackableUserData : IUserData, ITrackable<IUserData>
    {
        [IgnoreDataMember]
        public IPocoTracker<IUserData> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<IUserData>)value;
                Tracker = t;
            }
        }

        ITracker<IUserData> ITrackable<IUserData>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<IUserData>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                case "LeftHand":
                    return LeftHand as ITrackable;
                case "RightHand":
                    return RightHand as ITrackable;
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            var trackableLeftHand = LeftHand as ITrackable;
            if (trackableLeftHand != null && (changedOnly == false || trackableLeftHand.Changed))
                yield return new KeyValuePair<object, ITrackable>("LeftHand", trackableLeftHand);
            var trackableRightHand = RightHand as ITrackable;
            if (trackableRightHand != null && (changedOnly == false || trackableRightHand.Changed))
                yield return new KeyValuePair<object, ITrackable>("RightHand", trackableRightHand);
        }

        public static readonly PropertyInfo GoldProperty = typeof(IUserData).GetProperty("Gold");
        public static readonly PropertyInfo LeftHandProperty = typeof(IUserData).GetProperty("LeftHand");
        public static readonly PropertyInfo LevelProperty = typeof(IUserData).GetProperty("Level");
        public static readonly PropertyInfo NameProperty = typeof(IUserData).GetProperty("Name");
        public static readonly PropertyInfo RightHandProperty = typeof(IUserData).GetProperty("RightHand");

        private System.Int32 _Gold;

        public System.Int32 Gold
        {
            get
            {
                return _Gold;
            }
            set
            {
                if (Tracker != null && Gold != value)
                    Tracker.TrackSet(GoldProperty, _Gold, value);
                _Gold = value;
            }
        }

        private Basic.Data.IUserHandData _LeftHand;

        public Basic.Data.IUserHandData LeftHand
        {
            get
            {
                return _LeftHand;
            }
            set
            {
                if (Tracker != null && LeftHand != value)
                    Tracker.TrackSet(LeftHandProperty, _LeftHand, value);
                _LeftHand = value;
            }
        }

        private System.Int32 _Level;

        public System.Int32 Level
        {
            get
            {
                return _Level;
            }
            set
            {
                if (Tracker != null && Level != value)
                    Tracker.TrackSet(LevelProperty, _Level, value);
                _Level = value;
            }
        }

        private System.String _Name;

        public System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(NameProperty, _Name, value);
                _Name = value;
            }
        }

        private Basic.Data.IUserHandData _RightHand;

        public Basic.Data.IUserHandData RightHand
        {
            get
            {
                return _RightHand;
            }
            set
            {
                if (Tracker != null && RightHand != value)
                    Tracker.TrackSet(RightHandProperty, _RightHand, value);
                _RightHand = value;
            }
        }
    }
}

#endregion

#region Basic.Data.IUserHandData

namespace Basic.Data
{
    public class TrackableUserHandData : IUserHandData, ITrackable<IUserHandData>
    {
        [IgnoreDataMember]
        public IPocoTracker<IUserHandData> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<IUserHandData>)value;
                Tracker = t;
            }
        }

        ITracker<IUserHandData> ITrackable<IUserHandData>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<IUserHandData>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static readonly PropertyInfo DirtyProperty = typeof(IUserHandData).GetProperty("Dirty");
        public static readonly PropertyInfo FingerCountProperty = typeof(IUserHandData).GetProperty("FingerCount");

        private System.Boolean _Dirty;

        public System.Boolean Dirty
        {
            get
            {
                return _Dirty;
            }
            set
            {
                if (Tracker != null && Dirty != value)
                    Tracker.TrackSet(DirtyProperty, _Dirty, value);
                _Dirty = value;
            }
        }

        private System.Int32 _FingerCount;

        public System.Int32 FingerCount
        {
            get
            {
                return _FingerCount;
            }
            set
            {
                if (Tracker != null && FingerCount != value)
                    Tracker.TrackSet(FingerCountProperty, _FingerCount, value);
                _FingerCount = value;
            }
        }
    }
}

#endregion
