// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.Serialization;
using TrackableData;

#region Basic.Data.UserData

namespace Basic.Data
{
    public class TrackableUserData : UserData, ITrackable<UserData>
    {
        [IgnoreDataMember]
        public TrackablePocoTracker<UserData> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<UserData>)value;
                Tracker = t;
            }
        }

        ITracker<UserData> ITrackable<UserData>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<UserData>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                case "LeftHand":
                    return LeftHand as ITrackable;
                case "RightHand":
                    return RightHand as ITrackable;
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            var trackableLeftHand = LeftHand as ITrackable;
            if (trackableLeftHand != null && (changedOnly == false || trackableLeftHand.Changed))
                yield return new KeyValuePair<object, ITrackable>("LeftHand", trackableLeftHand);
            var trackableRightHand = RightHand as ITrackable;
            if (trackableRightHand != null && (changedOnly == false || trackableRightHand.Changed))
                yield return new KeyValuePair<object, ITrackable>("RightHand", trackableRightHand);
        }

        private static readonly PropertyInfo NameProperty = typeof(TrackableUserData).GetProperty("Name");
        public override System.String Name
        {
            get
            {
                return base.Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(NameProperty, base.Name, value);
                base.Name = value;
            }
        }

        private static readonly PropertyInfo GoldProperty = typeof(TrackableUserData).GetProperty("Gold");
        public override System.Int32 Gold
        {
            get
            {
                return base.Gold;
            }
            set
            {
                if (Tracker != null && Gold != value)
                    Tracker.TrackSet(GoldProperty, base.Gold, value);
                base.Gold = value;
            }
        }

        private static readonly PropertyInfo LevelProperty = typeof(TrackableUserData).GetProperty("Level");
        public override System.Int32 Level
        {
            get
            {
                return base.Level;
            }
            set
            {
                if (Tracker != null && Level != value)
                    Tracker.TrackSet(LevelProperty, base.Level, value);
                base.Level = value;
            }
        }

        private static readonly PropertyInfo LeftHandProperty = typeof(TrackableUserData).GetProperty("LeftHand");
        public override Basic.Data.UserHandData LeftHand
        {
            get
            {
                return base.LeftHand;
            }
            set
            {
                if (Tracker != null && LeftHand != value)
                    Tracker.TrackSet(LeftHandProperty, base.LeftHand, value);
                base.LeftHand = value;
            }
        }

        private static readonly PropertyInfo RightHandProperty = typeof(TrackableUserData).GetProperty("RightHand");
        public override Basic.Data.UserHandData RightHand
        {
            get
            {
                return base.RightHand;
            }
            set
            {
                if (Tracker != null && RightHand != value)
                    Tracker.TrackSet(RightHandProperty, base.RightHand, value);
                base.RightHand = value;
            }
        }
    }
}

#endregion

#region Basic.Data.UserHandData

namespace Basic.Data
{
    public class TrackableUserHandData : UserHandData, ITrackable<UserHandData>
    {
        [IgnoreDataMember]
        public TrackablePocoTracker<UserHandData> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<UserHandData>)value;
                Tracker = t;
            }
        }

        ITracker<UserHandData> ITrackable<UserHandData>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<UserHandData>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        private static readonly PropertyInfo FingerCountProperty = typeof(TrackableUserHandData).GetProperty("FingerCount");
        public override System.Int32 FingerCount
        {
            get
            {
                return base.FingerCount;
            }
            set
            {
                if (Tracker != null && FingerCount != value)
                    Tracker.TrackSet(FingerCountProperty, base.FingerCount, value);
                base.FingerCount = value;
            }
        }

        private static readonly PropertyInfo DirtyProperty = typeof(TrackableUserHandData).GetProperty("Dirty");
        public override System.Boolean Dirty
        {
            get
            {
                return base.Dirty;
            }
            set
            {
                if (Tracker != null && Dirty != value)
                    Tracker.TrackSet(DirtyProperty, base.Dirty, value);
                base.Dirty = value;
            }
        }
    }
}

#endregion
