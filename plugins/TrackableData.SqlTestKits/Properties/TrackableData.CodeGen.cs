// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by TrackableData.CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.Serialization;
using System.Linq;
using System.Text;
using TrackableData;
using TrackableData.TestKits;

#region ITestPoco

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestPoco : ITestPoco
    {
        [IgnoreDataMember]
        public IPocoTracker<ITestPoco> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPoco>)value;
                Tracker = t;
            }
        }

        ITracker<ITestPoco> ITrackable<ITestPoco>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPoco>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Id = typeof(ITestPoco).GetProperty("Id");
            public static readonly PropertyInfo Name = typeof(ITestPoco).GetProperty("Name");
            public static readonly PropertyInfo Age = typeof(ITestPoco).GetProperty("Age");
        }

        private int _Id;

        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (Tracker != null && Id != value)
                    Tracker.TrackSet(PropertyTable.Id, _Id, value);
                _Id = value;
            }
        }

        private string _Name;

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(PropertyTable.Name, _Name, value);
                _Name = value;
            }
        }

        private int _Age;

        public int Age
        {
            get
            {
                return _Age;
            }
            set
            {
                if (Tracker != null && Age != value)
                    Tracker.TrackSet(PropertyTable.Age, _Age, value);
                _Age = value;
            }
        }
    }
}

#endregion
#region ITestPocoForContainer

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestPocoForContainer : ITestPocoForContainer
    {
        [IgnoreDataMember]
        public IPocoTracker<ITestPocoForContainer> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPocoForContainer>)value;
                Tracker = t;
            }
        }

        ITracker<ITestPocoForContainer> ITrackable<ITestPocoForContainer>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPocoForContainer>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Name = typeof(ITestPocoForContainer).GetProperty("Name");
            public static readonly PropertyInfo Age = typeof(ITestPocoForContainer).GetProperty("Age");
            public static readonly PropertyInfo Extra = typeof(ITestPocoForContainer).GetProperty("Extra");
        }

        private string _Name;

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(PropertyTable.Name, _Name, value);
                _Name = value;
            }
        }

        private int _Age;

        public int Age
        {
            get
            {
                return _Age;
            }
            set
            {
                if (Tracker != null && Age != value)
                    Tracker.TrackSet(PropertyTable.Age, _Age, value);
                _Age = value;
            }
        }

        private int _Extra;

        public int Extra
        {
            get
            {
                return _Extra;
            }
            set
            {
                if (Tracker != null && Extra != value)
                    Tracker.TrackSet(PropertyTable.Extra, _Extra, value);
                _Extra = value;
            }
        }
    }
}

#endregion
#region ITestPocoWithIdentity

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestPocoWithIdentity : ITestPocoWithIdentity
    {
        [IgnoreDataMember]
        public IPocoTracker<ITestPocoWithIdentity> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPocoWithIdentity>)value;
                Tracker = t;
            }
        }

        ITracker<ITestPocoWithIdentity> ITrackable<ITestPocoWithIdentity>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPocoWithIdentity>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Id = typeof(ITestPocoWithIdentity).GetProperty("Id");
            public static readonly PropertyInfo Name = typeof(ITestPocoWithIdentity).GetProperty("Name");
            public static readonly PropertyInfo Age = typeof(ITestPocoWithIdentity).GetProperty("Age");
        }

        private int _Id;

        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (Tracker != null && Id != value)
                    Tracker.TrackSet(PropertyTable.Id, _Id, value);
                _Id = value;
            }
        }

        private string _Name;

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(PropertyTable.Name, _Name, value);
                _Name = value;
            }
        }

        private int _Age;

        public int Age
        {
            get
            {
                return _Age;
            }
            set
            {
                if (Tracker != null && Age != value)
                    Tracker.TrackSet(PropertyTable.Age, _Age, value);
                _Age = value;
            }
        }
    }
}

#endregion
#region ITestTypePoco

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestTypePoco : ITestTypePoco
    {
        [IgnoreDataMember]
        public IPocoTracker<ITestTypePoco> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestTypePoco>)value;
                Tracker = t;
            }
        }

        ITracker<ITestTypePoco> ITrackable<ITestTypePoco>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestTypePoco>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Id = typeof(ITestTypePoco).GetProperty("Id");
            public static readonly PropertyInfo vBool = typeof(ITestTypePoco).GetProperty("vBool");
            public static readonly PropertyInfo vByte = typeof(ITestTypePoco).GetProperty("vByte");
            public static readonly PropertyInfo vShort = typeof(ITestTypePoco).GetProperty("vShort");
            public static readonly PropertyInfo vChar = typeof(ITestTypePoco).GetProperty("vChar");
            public static readonly PropertyInfo vInt = typeof(ITestTypePoco).GetProperty("vInt");
            public static readonly PropertyInfo vLong = typeof(ITestTypePoco).GetProperty("vLong");
            public static readonly PropertyInfo vFloat = typeof(ITestTypePoco).GetProperty("vFloat");
            public static readonly PropertyInfo vDouble = typeof(ITestTypePoco).GetProperty("vDouble");
            public static readonly PropertyInfo vDecimal = typeof(ITestTypePoco).GetProperty("vDecimal");
            public static readonly PropertyInfo vDateTime = typeof(ITestTypePoco).GetProperty("vDateTime");
            public static readonly PropertyInfo vDateTimeOffset = typeof(ITestTypePoco).GetProperty("vDateTimeOffset");
            public static readonly PropertyInfo vTimeSpan = typeof(ITestTypePoco).GetProperty("vTimeSpan");
            public static readonly PropertyInfo vString = typeof(ITestTypePoco).GetProperty("vString");
            public static readonly PropertyInfo vBytes = typeof(ITestTypePoco).GetProperty("vBytes");
            public static readonly PropertyInfo vGuid = typeof(ITestTypePoco).GetProperty("vGuid");
            public static readonly PropertyInfo vSuit = typeof(ITestTypePoco).GetProperty("vSuit");
        }

        private int _Id;

        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (Tracker != null && Id != value)
                    Tracker.TrackSet(PropertyTable.Id, _Id, value);
                _Id = value;
            }
        }

        private bool _vBool;

        public bool vBool
        {
            get
            {
                return _vBool;
            }
            set
            {
                if (Tracker != null && vBool != value)
                    Tracker.TrackSet(PropertyTable.vBool, _vBool, value);
                _vBool = value;
            }
        }

        private byte _vByte;

        public byte vByte
        {
            get
            {
                return _vByte;
            }
            set
            {
                if (Tracker != null && vByte != value)
                    Tracker.TrackSet(PropertyTable.vByte, _vByte, value);
                _vByte = value;
            }
        }

        private short _vShort;

        public short vShort
        {
            get
            {
                return _vShort;
            }
            set
            {
                if (Tracker != null && vShort != value)
                    Tracker.TrackSet(PropertyTable.vShort, _vShort, value);
                _vShort = value;
            }
        }

        private char _vChar;

        public char vChar
        {
            get
            {
                return _vChar;
            }
            set
            {
                if (Tracker != null && vChar != value)
                    Tracker.TrackSet(PropertyTable.vChar, _vChar, value);
                _vChar = value;
            }
        }

        private int _vInt;

        public int vInt
        {
            get
            {
                return _vInt;
            }
            set
            {
                if (Tracker != null && vInt != value)
                    Tracker.TrackSet(PropertyTable.vInt, _vInt, value);
                _vInt = value;
            }
        }

        private long _vLong;

        public long vLong
        {
            get
            {
                return _vLong;
            }
            set
            {
                if (Tracker != null && vLong != value)
                    Tracker.TrackSet(PropertyTable.vLong, _vLong, value);
                _vLong = value;
            }
        }

        private float _vFloat;

        public float vFloat
        {
            get
            {
                return _vFloat;
            }
            set
            {
                if (Tracker != null && vFloat != value)
                    Tracker.TrackSet(PropertyTable.vFloat, _vFloat, value);
                _vFloat = value;
            }
        }

        private double _vDouble;

        public double vDouble
        {
            get
            {
                return _vDouble;
            }
            set
            {
                if (Tracker != null && vDouble != value)
                    Tracker.TrackSet(PropertyTable.vDouble, _vDouble, value);
                _vDouble = value;
            }
        }

        private decimal _vDecimal;

        public decimal vDecimal
        {
            get
            {
                return _vDecimal;
            }
            set
            {
                if (Tracker != null && vDecimal != value)
                    Tracker.TrackSet(PropertyTable.vDecimal, _vDecimal, value);
                _vDecimal = value;
            }
        }

        private DateTime _vDateTime;

        public DateTime vDateTime
        {
            get
            {
                return _vDateTime;
            }
            set
            {
                if (Tracker != null && vDateTime != value)
                    Tracker.TrackSet(PropertyTable.vDateTime, _vDateTime, value);
                _vDateTime = value;
            }
        }

        private DateTimeOffset _vDateTimeOffset;

        public DateTimeOffset vDateTimeOffset
        {
            get
            {
                return _vDateTimeOffset;
            }
            set
            {
                if (Tracker != null && vDateTimeOffset != value)
                    Tracker.TrackSet(PropertyTable.vDateTimeOffset, _vDateTimeOffset, value);
                _vDateTimeOffset = value;
            }
        }

        private TimeSpan _vTimeSpan;

        public TimeSpan vTimeSpan
        {
            get
            {
                return _vTimeSpan;
            }
            set
            {
                if (Tracker != null && vTimeSpan != value)
                    Tracker.TrackSet(PropertyTable.vTimeSpan, _vTimeSpan, value);
                _vTimeSpan = value;
            }
        }

        private string _vString;

        public string vString
        {
            get
            {
                return _vString;
            }
            set
            {
                if (Tracker != null && vString != value)
                    Tracker.TrackSet(PropertyTable.vString, _vString, value);
                _vString = value;
            }
        }

        private byte[] _vBytes;

        public byte[] vBytes
        {
            get
            {
                return _vBytes;
            }
            set
            {
                if (Tracker != null && vBytes != value)
                    Tracker.TrackSet(PropertyTable.vBytes, _vBytes, value);
                _vBytes = value;
            }
        }

        private Guid _vGuid;

        public Guid vGuid
        {
            get
            {
                return _vGuid;
            }
            set
            {
                if (Tracker != null && vGuid != value)
                    Tracker.TrackSet(PropertyTable.vGuid, _vGuid, value);
                _vGuid = value;
            }
        }

        private Suit _vSuit;

        public Suit vSuit
        {
            get
            {
                return _vSuit;
            }
            set
            {
                if (Tracker != null && vSuit != value)
                    Tracker.TrackSet(PropertyTable.vSuit, _vSuit, value);
                _vSuit = value;
            }
        }
    }
}

#endregion
#region ITestTypeNullablePoco

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestTypeNullablePoco : ITestTypeNullablePoco
    {
        [IgnoreDataMember]
        public IPocoTracker<ITestTypeNullablePoco> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestTypeNullablePoco>)value;
                Tracker = t;
            }
        }

        ITracker<ITestTypeNullablePoco> ITrackable<ITestTypeNullablePoco>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestTypeNullablePoco>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Id = typeof(ITestTypeNullablePoco).GetProperty("Id");
            public static readonly PropertyInfo vBool = typeof(ITestTypeNullablePoco).GetProperty("vBool");
            public static readonly PropertyInfo vByte = typeof(ITestTypeNullablePoco).GetProperty("vByte");
            public static readonly PropertyInfo vShort = typeof(ITestTypeNullablePoco).GetProperty("vShort");
            public static readonly PropertyInfo vChar = typeof(ITestTypeNullablePoco).GetProperty("vChar");
            public static readonly PropertyInfo vInt = typeof(ITestTypeNullablePoco).GetProperty("vInt");
            public static readonly PropertyInfo vLong = typeof(ITestTypeNullablePoco).GetProperty("vLong");
            public static readonly PropertyInfo vFloat = typeof(ITestTypeNullablePoco).GetProperty("vFloat");
            public static readonly PropertyInfo vDouble = typeof(ITestTypeNullablePoco).GetProperty("vDouble");
            public static readonly PropertyInfo vDecimal = typeof(ITestTypeNullablePoco).GetProperty("vDecimal");
            public static readonly PropertyInfo vDateTime = typeof(ITestTypeNullablePoco).GetProperty("vDateTime");
            public static readonly PropertyInfo vDateTimeOffset = typeof(ITestTypeNullablePoco).GetProperty("vDateTimeOffset");
            public static readonly PropertyInfo vTimeSpan = typeof(ITestTypeNullablePoco).GetProperty("vTimeSpan");
            public static readonly PropertyInfo vGuid = typeof(ITestTypeNullablePoco).GetProperty("vGuid");
            public static readonly PropertyInfo vSuit = typeof(ITestTypeNullablePoco).GetProperty("vSuit");
        }

        private int _Id;

        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (Tracker != null && Id != value)
                    Tracker.TrackSet(PropertyTable.Id, _Id, value);
                _Id = value;
            }
        }

        private bool? _vBool;

        public bool? vBool
        {
            get
            {
                return _vBool;
            }
            set
            {
                if (Tracker != null && vBool != value)
                    Tracker.TrackSet(PropertyTable.vBool, _vBool, value);
                _vBool = value;
            }
        }

        private byte? _vByte;

        public byte? vByte
        {
            get
            {
                return _vByte;
            }
            set
            {
                if (Tracker != null && vByte != value)
                    Tracker.TrackSet(PropertyTable.vByte, _vByte, value);
                _vByte = value;
            }
        }

        private short? _vShort;

        public short? vShort
        {
            get
            {
                return _vShort;
            }
            set
            {
                if (Tracker != null && vShort != value)
                    Tracker.TrackSet(PropertyTable.vShort, _vShort, value);
                _vShort = value;
            }
        }

        private char? _vChar;

        public char? vChar
        {
            get
            {
                return _vChar;
            }
            set
            {
                if (Tracker != null && vChar != value)
                    Tracker.TrackSet(PropertyTable.vChar, _vChar, value);
                _vChar = value;
            }
        }

        private int? _vInt;

        public int? vInt
        {
            get
            {
                return _vInt;
            }
            set
            {
                if (Tracker != null && vInt != value)
                    Tracker.TrackSet(PropertyTable.vInt, _vInt, value);
                _vInt = value;
            }
        }

        private long? _vLong;

        public long? vLong
        {
            get
            {
                return _vLong;
            }
            set
            {
                if (Tracker != null && vLong != value)
                    Tracker.TrackSet(PropertyTable.vLong, _vLong, value);
                _vLong = value;
            }
        }

        private float? _vFloat;

        public float? vFloat
        {
            get
            {
                return _vFloat;
            }
            set
            {
                if (Tracker != null && vFloat != value)
                    Tracker.TrackSet(PropertyTable.vFloat, _vFloat, value);
                _vFloat = value;
            }
        }

        private double? _vDouble;

        public double? vDouble
        {
            get
            {
                return _vDouble;
            }
            set
            {
                if (Tracker != null && vDouble != value)
                    Tracker.TrackSet(PropertyTable.vDouble, _vDouble, value);
                _vDouble = value;
            }
        }

        private decimal? _vDecimal;

        public decimal? vDecimal
        {
            get
            {
                return _vDecimal;
            }
            set
            {
                if (Tracker != null && vDecimal != value)
                    Tracker.TrackSet(PropertyTable.vDecimal, _vDecimal, value);
                _vDecimal = value;
            }
        }

        private DateTime? _vDateTime;

        public DateTime? vDateTime
        {
            get
            {
                return _vDateTime;
            }
            set
            {
                if (Tracker != null && vDateTime != value)
                    Tracker.TrackSet(PropertyTable.vDateTime, _vDateTime, value);
                _vDateTime = value;
            }
        }

        private DateTimeOffset? _vDateTimeOffset;

        public DateTimeOffset? vDateTimeOffset
        {
            get
            {
                return _vDateTimeOffset;
            }
            set
            {
                if (Tracker != null && vDateTimeOffset != value)
                    Tracker.TrackSet(PropertyTable.vDateTimeOffset, _vDateTimeOffset, value);
                _vDateTimeOffset = value;
            }
        }

        private TimeSpan? _vTimeSpan;

        public TimeSpan? vTimeSpan
        {
            get
            {
                return _vTimeSpan;
            }
            set
            {
                if (Tracker != null && vTimeSpan != value)
                    Tracker.TrackSet(PropertyTable.vTimeSpan, _vTimeSpan, value);
                _vTimeSpan = value;
            }
        }

        private Guid? _vGuid;

        public Guid? vGuid
        {
            get
            {
                return _vGuid;
            }
            set
            {
                if (Tracker != null && vGuid != value)
                    Tracker.TrackSet(PropertyTable.vGuid, _vGuid, value);
                _vGuid = value;
            }
        }

        private Suit? _vSuit;

        public Suit? vSuit
        {
            get
            {
                return _vSuit;
            }
            set
            {
                if (Tracker != null && vSuit != value)
                    Tracker.TrackSet(PropertyTable.vSuit, _vSuit, value);
                _vSuit = value;
            }
        }
    }
}

#endregion
#region ITestContainer

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestContainer : ITestContainer
    {
        [IgnoreDataMember]
        private TrackableTestContainerTracker _tracker;

        [IgnoreDataMember]
        public TrackableTestContainerTracker Tracker
        {
            get
            {
                return _tracker;
            }
            set
            {
                _tracker = value;
                Person.Tracker = value?.PersonTracker;
                Missions.Tracker = value?.MissionsTracker;
            }
        }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerTracker)value;
                Tracker = t;
            }
        }

        ITracker<ITestContainer> ITrackable<ITestContainer>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerTracker)value;
                Tracker = t;
            }
        }

        IContainerTracker<ITestContainer> ITrackableContainer<ITestContainer>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerTracker)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                case "Person":
                    return Person as ITrackable;
                case "Missions":
                    return Missions as ITrackable;
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            var trackablePerson = Person as ITrackable;
            if (trackablePerson != null && (changedOnly == false || trackablePerson.Changed))
                yield return new KeyValuePair<object, ITrackable>("Person", trackablePerson);
            var trackableMissions = Missions as ITrackable;
            if (trackableMissions != null && (changedOnly == false || trackableMissions.Changed))
                yield return new KeyValuePair<object, ITrackable>("Missions", trackableMissions);
        }

        private TrackableTestPocoForContainer _Person = new TrackableTestPocoForContainer();

        public TrackableTestPocoForContainer Person
        {
            get
            {
                return _Person;
            }
            set
            {
                if (_Person != null)
                    _Person.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.PersonTracker;
                _Person = value;
            }
        }

        TrackableTestPocoForContainer ITestContainer.Person
        {
            get { return _Person; }
            set { _Person = (TrackableTestPocoForContainer)value; }
        }

        private TrackableDictionary<int, MissionData> _Missions = new TrackableDictionary<int, MissionData>();

        public TrackableDictionary<int, MissionData> Missions
        {
            get
            {
                return _Missions;
            }
            set
            {
                if (_Missions != null)
                    _Missions.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.MissionsTracker;
                _Missions = value;
            }
        }

        TrackableDictionary<int, MissionData> ITestContainer.Missions
        {
            get { return _Missions; }
            set { _Missions = (TrackableDictionary<int, MissionData>)value; }
        }
    }

    public class TrackableTestContainerTracker : IContainerTracker<ITestContainer>
    {
        public TrackablePocoTracker<ITestPocoForContainer> PersonTracker { get; set; } = new TrackablePocoTracker<ITestPocoForContainer>();
        public TrackableDictionaryTracker<int, MissionData> MissionsTracker { get; set; } = new TrackableDictionaryTracker<int, MissionData>();

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("{ ");
            var first = true;
            if (PersonTracker != null && PersonTracker.HasChange)
            {
                if (first)
                    first = false;
                else
                    sb.Append(", ");
                sb.Append("Person:");
                sb.Append(PersonTracker);
            }

            if (MissionsTracker != null && MissionsTracker.HasChange)
            {
                if (first)
                    first = false;
                else
                    sb.Append(", ");
                sb.Append("Missions:");
                sb.Append(MissionsTracker);
            }

            sb.Append(" }");
            return sb.ToString();
        }

        public bool HasChange
        {
            get
            {
                return
                    (PersonTracker != null && PersonTracker.HasChange) ||
                    (MissionsTracker != null && MissionsTracker.HasChange) ||
                    false;
            }
        }

        public event TrackerHasChangeSet HasChangeSet
        {
            add { throw new NotImplementedException(); }
            remove { throw new NotImplementedException(); }
        }

        public void Clear()
        {
            if (PersonTracker != null)
                PersonTracker.Clear();
            if (MissionsTracker != null)
                MissionsTracker.Clear();
        }

        public void ApplyTo(object trackable)
        {
            ApplyTo((ITestContainer)trackable);
        }

        public void ApplyTo(ITestContainer trackable)
        {
            if (PersonTracker != null)
                PersonTracker.ApplyTo(trackable.Person);
            if (MissionsTracker != null)
                MissionsTracker.ApplyTo(trackable.Missions);
        }

        public void ApplyTo(ITracker tracker)
        {
            ApplyTo((TrackableTestContainerTracker)tracker);
        }

        public void ApplyTo(ITracker<ITestContainer> tracker)
        {
            ApplyTo((TrackableTestContainerTracker)tracker);
        }

        public void ApplyTo(TrackableTestContainerTracker tracker)
        {
            if (PersonTracker != null)
                PersonTracker.ApplyTo(tracker.PersonTracker);
            if (MissionsTracker != null)
                MissionsTracker.ApplyTo(tracker.MissionsTracker);
        }

        public void RollbackTo(object trackable)
        {
            RollbackTo((ITestContainer)trackable);
        }

        public void RollbackTo(ITestContainer trackable)
        {
            if (PersonTracker != null)
                PersonTracker.RollbackTo(trackable.Person);
            if (MissionsTracker != null)
                MissionsTracker.RollbackTo(trackable.Missions);
        }

        public void RollbackTo(ITracker tracker)
        {
            RollbackTo((TrackableTestContainerTracker)tracker);
        }

        public void RollbackTo(ITracker<ITestContainer> tracker)
        {
            RollbackTo((TrackableTestContainerTracker)tracker);
        }

        public void RollbackTo(TrackableTestContainerTracker tracker)
        {
            if (PersonTracker != null)
                PersonTracker.RollbackTo(tracker.PersonTracker);
            if (MissionsTracker != null)
                MissionsTracker.RollbackTo(tracker.MissionsTracker);
        }
    }
}

#endregion
#region ITestContainerWithIgnore

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestContainerWithIgnore : ITestContainerWithIgnore
    {
        [IgnoreDataMember]
        private TrackableTestContainerWithIgnoreTracker _tracker;

        [IgnoreDataMember]
        public TrackableTestContainerWithIgnoreTracker Tracker
        {
            get
            {
                return _tracker;
            }
            set
            {
                _tracker = value;
                Person.Tracker = value?.PersonTracker;
                Missions.Tracker = value?.MissionsTracker;
            }
        }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerWithIgnoreTracker)value;
                Tracker = t;
            }
        }

        ITracker<ITestContainerWithIgnore> ITrackable<ITestContainerWithIgnore>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerWithIgnoreTracker)value;
                Tracker = t;
            }
        }

        IContainerTracker<ITestContainerWithIgnore> ITrackableContainer<ITestContainerWithIgnore>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerWithIgnoreTracker)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                case "Person":
                    return Person as ITrackable;
                case "Missions":
                    return Missions as ITrackable;
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            var trackablePerson = Person as ITrackable;
            if (trackablePerson != null && (changedOnly == false || trackablePerson.Changed))
                yield return new KeyValuePair<object, ITrackable>("Person", trackablePerson);
            var trackableMissions = Missions as ITrackable;
            if (trackableMissions != null && (changedOnly == false || trackableMissions.Changed))
                yield return new KeyValuePair<object, ITrackable>("Missions", trackableMissions);
        }

        private TrackableTestPocoForContainer _Person = new TrackableTestPocoForContainer();

        public TrackableTestPocoForContainer Person
        {
            get
            {
                return _Person;
            }
            set
            {
                if (_Person != null)
                    _Person.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.PersonTracker;
                _Person = value;
            }
        }

        TrackableTestPocoForContainer ITestContainerWithIgnore.Person
        {
            get { return _Person; }
            set { _Person = (TrackableTestPocoForContainer)value; }
        }

        private TrackableDictionary<int, MissionData> _Missions = new TrackableDictionary<int, MissionData>();

        public TrackableDictionary<int, MissionData> Missions
        {
            get
            {
                return _Missions;
            }
            set
            {
                if (_Missions != null)
                    _Missions.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.MissionsTracker;
                _Missions = value;
            }
        }

        TrackableDictionary<int, MissionData> ITestContainerWithIgnore.Missions
        {
            get { return _Missions; }
            set { _Missions = (TrackableDictionary<int, MissionData>)value; }
        }
    }

    public class TrackableTestContainerWithIgnoreTracker : IContainerTracker<ITestContainerWithIgnore>
    {
        public TrackablePocoTracker<ITestPocoForContainer> PersonTracker { get; set; } = new TrackablePocoTracker<ITestPocoForContainer>();
        public TrackableDictionaryTracker<int, MissionData> MissionsTracker { get; set; } = new TrackableDictionaryTracker<int, MissionData>();

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("{ ");
            var first = true;
            if (PersonTracker != null && PersonTracker.HasChange)
            {
                if (first)
                    first = false;
                else
                    sb.Append(", ");
                sb.Append("Person:");
                sb.Append(PersonTracker);
            }

            if (MissionsTracker != null && MissionsTracker.HasChange)
            {
                if (first)
                    first = false;
                else
                    sb.Append(", ");
                sb.Append("Missions:");
                sb.Append(MissionsTracker);
            }

            sb.Append(" }");
            return sb.ToString();
        }

        public bool HasChange
        {
            get
            {
                return
                    (PersonTracker != null && PersonTracker.HasChange) ||
                    (MissionsTracker != null && MissionsTracker.HasChange) ||
                    false;
            }
        }

        public event TrackerHasChangeSet HasChangeSet
        {
            add { throw new NotImplementedException(); }
            remove { throw new NotImplementedException(); }
        }

        public void Clear()
        {
            if (PersonTracker != null)
                PersonTracker.Clear();
            if (MissionsTracker != null)
                MissionsTracker.Clear();
        }

        public void ApplyTo(object trackable)
        {
            ApplyTo((ITestContainerWithIgnore)trackable);
        }

        public void ApplyTo(ITestContainerWithIgnore trackable)
        {
            if (PersonTracker != null)
                PersonTracker.ApplyTo(trackable.Person);
            if (MissionsTracker != null)
                MissionsTracker.ApplyTo(trackable.Missions);
        }

        public void ApplyTo(ITracker tracker)
        {
            ApplyTo((TrackableTestContainerWithIgnoreTracker)tracker);
        }

        public void ApplyTo(ITracker<ITestContainerWithIgnore> tracker)
        {
            ApplyTo((TrackableTestContainerWithIgnoreTracker)tracker);
        }

        public void ApplyTo(TrackableTestContainerWithIgnoreTracker tracker)
        {
            if (PersonTracker != null)
                PersonTracker.ApplyTo(tracker.PersonTracker);
            if (MissionsTracker != null)
                MissionsTracker.ApplyTo(tracker.MissionsTracker);
        }

        public void RollbackTo(object trackable)
        {
            RollbackTo((ITestContainerWithIgnore)trackable);
        }

        public void RollbackTo(ITestContainerWithIgnore trackable)
        {
            if (PersonTracker != null)
                PersonTracker.RollbackTo(trackable.Person);
            if (MissionsTracker != null)
                MissionsTracker.RollbackTo(trackable.Missions);
        }

        public void RollbackTo(ITracker tracker)
        {
            RollbackTo((TrackableTestContainerWithIgnoreTracker)tracker);
        }

        public void RollbackTo(ITracker<ITestContainerWithIgnore> tracker)
        {
            RollbackTo((TrackableTestContainerWithIgnoreTracker)tracker);
        }

        public void RollbackTo(TrackableTestContainerWithIgnoreTracker tracker)
        {
            if (PersonTracker != null)
                PersonTracker.RollbackTo(tracker.PersonTracker);
            if (MissionsTracker != null)
                MissionsTracker.RollbackTo(tracker.MissionsTracker);
        }
    }
}

#endregion
