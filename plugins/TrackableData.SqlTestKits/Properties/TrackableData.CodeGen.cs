// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by TrackableData CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using TrackableData.TestKits;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.Serialization;
using System.Linq;
using System.Text;
using TrackableData;

#region ITestPoco

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestPoco : ITestPoco
    {
        [IgnoreDataMember]
        public IPocoTracker<ITestPoco> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPoco>)value;
                Tracker = t;
            }
        }

        ITracker<ITestPoco> ITrackable<ITestPoco>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPoco>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Id = typeof(ITestPoco).GetProperty("Id");
            public static readonly PropertyInfo Name = typeof(ITestPoco).GetProperty("Name");
            public static readonly PropertyInfo Age = typeof(ITestPoco).GetProperty("Age");
        }

        private int _Id;

        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (Tracker != null && Id != value)
                    Tracker.TrackSet(PropertyTable.Id, _Id, value);
                _Id = value;
            }
        }

        private string _Name;

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(PropertyTable.Name, _Name, value);
                _Name = value;
            }
        }

        private int _Age;

        public int Age
        {
            get
            {
                return _Age;
            }
            set
            {
                if (Tracker != null && Age != value)
                    Tracker.TrackSet(PropertyTable.Age, _Age, value);
                _Age = value;
            }
        }
    }
}

#endregion

#region ITestPocoForContainer

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestPocoForContainer : ITestPocoForContainer
    {
        [IgnoreDataMember]
        public IPocoTracker<ITestPocoForContainer> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPocoForContainer>)value;
                Tracker = t;
            }
        }

        ITracker<ITestPocoForContainer> ITrackable<ITestPocoForContainer>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPocoForContainer>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Name = typeof(ITestPocoForContainer).GetProperty("Name");
            public static readonly PropertyInfo Age = typeof(ITestPocoForContainer).GetProperty("Age");
            public static readonly PropertyInfo Extra = typeof(ITestPocoForContainer).GetProperty("Extra");
        }

        private string _Name;

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(PropertyTable.Name, _Name, value);
                _Name = value;
            }
        }

        private int _Age;

        public int Age
        {
            get
            {
                return _Age;
            }
            set
            {
                if (Tracker != null && Age != value)
                    Tracker.TrackSet(PropertyTable.Age, _Age, value);
                _Age = value;
            }
        }

        private int _Extra;

        public int Extra
        {
            get
            {
                return _Extra;
            }
            set
            {
                if (Tracker != null && Extra != value)
                    Tracker.TrackSet(PropertyTable.Extra, _Extra, value);
                _Extra = value;
            }
        }
    }
}

#endregion

#region ITestPocoWithIdentity

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestPocoWithIdentity : ITestPocoWithIdentity
    {
        [IgnoreDataMember]
        public IPocoTracker<ITestPocoWithIdentity> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPocoWithIdentity>)value;
                Tracker = t;
            }
        }

        ITracker<ITestPocoWithIdentity> ITrackable<ITestPocoWithIdentity>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<ITestPocoWithIdentity>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Id = typeof(ITestPocoWithIdentity).GetProperty("Id");
            public static readonly PropertyInfo Name = typeof(ITestPocoWithIdentity).GetProperty("Name");
            public static readonly PropertyInfo Age = typeof(ITestPocoWithIdentity).GetProperty("Age");
        }

        private int _Id;

        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (Tracker != null && Id != value)
                    Tracker.TrackSet(PropertyTable.Id, _Id, value);
                _Id = value;
            }
        }

        private string _Name;

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(PropertyTable.Name, _Name, value);
                _Name = value;
            }
        }

        private int _Age;

        public int Age
        {
            get
            {
                return _Age;
            }
            set
            {
                if (Tracker != null && Age != value)
                    Tracker.TrackSet(PropertyTable.Age, _Age, value);
                _Age = value;
            }
        }
    }
}

#endregion

#region ITestContainer

namespace TrackableData.SqlTestKits
{
    public partial class TrackableTestContainer : ITestContainer
    {
        [IgnoreDataMember]
        private TrackableTestContainerTracker _tracker;

        [IgnoreDataMember]
        public TrackableTestContainerTracker Tracker
        {
            get
            {
                return _tracker;
            }
            set
            {
                _tracker = value;
                Person.Tracker = value?.PersonTracker;
                Missions.Tracker = value?.MissionsTracker;
            }
        }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerTracker)value;
                Tracker = t;
            }
        }

        ITracker<ITestContainer> ITrackable<ITestContainer>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerTracker)value;
                Tracker = t;
            }
        }

        IContainerTracker<ITestContainer> ITrackableContainer<ITestContainer>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableTestContainerTracker)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                case "Person":
                    return Person as ITrackable;
                case "Missions":
                    return Missions as ITrackable;
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            var trackablePerson = Person as ITrackable;
            if (trackablePerson != null && (changedOnly == false || trackablePerson.Changed))
                yield return new KeyValuePair<object, ITrackable>("Person", trackablePerson);
            var trackableMissions = Missions as ITrackable;
            if (trackableMissions != null && (changedOnly == false || trackableMissions.Changed))
                yield return new KeyValuePair<object, ITrackable>("Missions", trackableMissions);
        }

        private TrackableTestPocoForContainer _Person = new TrackableTestPocoForContainer();

        public TrackableTestPocoForContainer Person
        {
            get
            {
                return _Person;
            }
            set
            {
                if (_Person != null)
                    _Person.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.PersonTracker;
                _Person = value;
            }
        }

        TrackableTestPocoForContainer ITestContainer.Person
        {
            get { return _Person; }
            set { _Person = (TrackableTestPocoForContainer)value; }
        }

        private TrackableDictionary<int, MissionData> _Missions = new TrackableDictionary<int, MissionData>();

        public TrackableDictionary<int, MissionData> Missions
        {
            get
            {
                return _Missions;
            }
            set
            {
                if (_Missions != null)
                    _Missions.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.MissionsTracker;
                _Missions = value;
            }
        }

        TrackableDictionary<int, MissionData> ITestContainer.Missions
        {
            get { return _Missions; }
            set { _Missions = (TrackableDictionary<int, MissionData>)value; }
        }
    }

    public class TrackableTestContainerTracker : IContainerTracker<ITestContainer>
    {
        public TrackablePocoTracker<ITestPocoForContainer> PersonTracker { get; set; } = new TrackablePocoTracker<ITestPocoForContainer>();
        public TrackableDictionaryTracker<int, MissionData> MissionsTracker { get; set; } = new TrackableDictionaryTracker<int, MissionData>();

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("{ ");
            var first = true;
            if (PersonTracker != null && PersonTracker.HasChange)
            {
                if (first)
                    first = false;
                else
                    sb.Append(", ");
                sb.Append("Person:");
                sb.Append(PersonTracker);
            }
            if (MissionsTracker != null && MissionsTracker.HasChange)
            {
                if (first)
                    first = false;
                else
                    sb.Append(", ");
                sb.Append("Missions:");
                sb.Append(MissionsTracker);
            }
            sb.Append(" }");
            return sb.ToString();
        }

        public bool HasChange
        {
            get
            {
                return
                    (PersonTracker != null && PersonTracker.HasChange) ||
                    (MissionsTracker != null && MissionsTracker.HasChange) ||
                    false;
            }
        }

        public event TrackerHasChangeSet HasChangeSet
        {
            add { throw new NotImplementedException(); }
            remove { throw new NotImplementedException(); }
        }

        public void Clear()
        {
            if (PersonTracker != null)
                PersonTracker.Clear();
            if (MissionsTracker != null)
                MissionsTracker.Clear();
        }

        public void ApplyTo(object trackable)
        {
            ApplyTo((ITestContainer)trackable);
        }

        public void ApplyTo(ITestContainer trackable)
        {
            if (PersonTracker != null)
                PersonTracker.ApplyTo(trackable.Person);
            if (MissionsTracker != null)
                MissionsTracker.ApplyTo(trackable.Missions);
        }

        public void ApplyTo(ITracker tracker)
        {
            ApplyTo((TrackableTestContainerTracker)tracker);
        }

        public void ApplyTo(ITracker<ITestContainer> tracker)
        {
            ApplyTo((TrackableTestContainerTracker)tracker);
        }

        public void ApplyTo(TrackableTestContainerTracker tracker)
        {
            if (PersonTracker != null)
                PersonTracker.ApplyTo(tracker.PersonTracker);
            if (MissionsTracker != null)
                MissionsTracker.ApplyTo(tracker.MissionsTracker);
        }

        public void RollbackTo(object trackable)
        {
            RollbackTo((ITestContainer)trackable);
        }

        public void RollbackTo(ITestContainer trackable)
        {
            if (PersonTracker != null)
                PersonTracker.RollbackTo(trackable.Person);
            if (MissionsTracker != null)
                MissionsTracker.RollbackTo(trackable.Missions);
        }

        public void RollbackTo(ITracker tracker)
        {
            RollbackTo((TrackableTestContainerTracker)tracker);
        }

        public void RollbackTo(ITracker<ITestContainer> tracker)
        {
            RollbackTo((TrackableTestContainerTracker)tracker);
        }

        public void RollbackTo(TrackableTestContainerTracker tracker)
        {
            if (PersonTracker != null)
                PersonTracker.RollbackTo(tracker.PersonTracker);
            if (MissionsTracker != null)
                MissionsTracker.RollbackTo(tracker.MissionsTracker);
        }
    }
}

#endregion
