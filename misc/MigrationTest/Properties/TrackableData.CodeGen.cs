// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using ProtoBuf;
using TrackableData;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.Serialization;
using System.Linq;

#region IUserData

namespace Model
{
    [ProtoContract]
    public class TrackableUserData : IUserData, ITrackable<IUserData>
    {
        [IgnoreDataMember]
        public IPocoTracker<IUserData> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<IUserData>)value;
                Tracker = t;
            }
        }

        ITracker<IUserData> ITrackable<IUserData>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (IPocoTracker<IUserData>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static class PropertyTable
        {
            public static readonly PropertyInfo Name = typeof(IUserData).GetProperty("Name");
            public static readonly PropertyInfo EncPhotoUrl = typeof(IUserData).GetProperty("EncPhotoUrl");
            public static readonly PropertyInfo Permission = typeof(IUserData).GetProperty("Permission");
            public static readonly PropertyInfo Inviter = typeof(IUserData).GetProperty("Inviter");
            public static readonly PropertyInfo LastItemId = typeof(IUserData).GetProperty("LastItemId");
            public static readonly PropertyInfo LastPostId = typeof(IUserData).GetProperty("LastPostId");
            public static readonly PropertyInfo Stamina = typeof(IUserData).GetProperty("Stamina");
            public static readonly PropertyInfo StaminaRefillTime = typeof(IUserData).GetProperty("StaminaRefillTime");
            public static readonly PropertyInfo RaidStamina = typeof(IUserData).GetProperty("RaidStamina");
            public static readonly PropertyInfo RaidStaminaRefillTime = typeof(IUserData).GetProperty("RaidStaminaRefillTime");
            public static readonly PropertyInfo Gold = typeof(IUserData).GetProperty("Gold");
            public static readonly PropertyInfo RubyCash = typeof(IUserData).GetProperty("RubyCash");
            public static readonly PropertyInfo RubyEvent = typeof(IUserData).GetProperty("RubyEvent");
            public static readonly PropertyInfo Fame = typeof(IUserData).GetProperty("Fame");
            public static readonly PropertyInfo Medal = typeof(IUserData).GetProperty("Medal");
            public static readonly PropertyInfo LuckyClover = typeof(IUserData).GetProperty("LuckyClover");
            public static readonly PropertyInfo JackpotKey = typeof(IUserData).GetProperty("JackpotKey");
            public static readonly PropertyInfo Rank = typeof(IUserData).GetProperty("Rank");
            public static readonly PropertyInfo VipLevel = typeof(IUserData).GetProperty("VipLevel");
            public static readonly PropertyInfo TotalMoneySpent = typeof(IUserData).GetProperty("TotalMoneySpent");
            public static readonly PropertyInfo TankArmor = typeof(IUserData).GetProperty("TankArmor");
            public static readonly PropertyInfo TankEngine = typeof(IUserData).GetProperty("TankEngine");
            public static readonly PropertyInfo TankGoldBonus = typeof(IUserData).GetProperty("TankGoldBonus");
            public static readonly PropertyInfo TankSeats = typeof(IUserData).GetProperty("TankSeats");
            public static readonly PropertyInfo MaxStage = typeof(IUserData).GetProperty("MaxStage");
            public static readonly PropertyInfo MainStage = typeof(IUserData).GetProperty("MainStage");
            public static readonly PropertyInfo MainItemId = typeof(IUserData).GetProperty("MainItemId");
            public static readonly PropertyInfo MainTankId = typeof(IUserData).GetProperty("MainTankId");
            public static readonly PropertyInfo DayChangeTime = typeof(IUserData).GetProperty("DayChangeTime");
            public static readonly PropertyInfo MissionReplaceCount = typeof(IUserData).GetProperty("MissionReplaceCount");
            public static readonly PropertyInfo FestivalVisitProgress = typeof(IUserData).GetProperty("FestivalVisitProgress");
            public static readonly PropertyInfo FestivalPreRegistrationId = typeof(IUserData).GetProperty("FestivalPreRegistrationId");
            public static readonly PropertyInfo FestivalPreRegistrationProgress = typeof(IUserData).GetProperty("FestivalPreRegistrationProgress");
            public static readonly PropertyInfo FestivalNewUserSupportProgress = typeof(IUserData).GetProperty("FestivalNewUserSupportProgress");
            public static readonly PropertyInfo FestivalInviteFriendsId = typeof(IUserData).GetProperty("FestivalInviteFriendsId");
            public static readonly PropertyInfo FestivalInvitedFriendRankRewardProgress = typeof(IUserData).GetProperty("FestivalInvitedFriendRankRewardProgress");
            public static readonly PropertyInfo FestivalReturnUserSupportProgress = typeof(IUserData).GetProperty("FestivalReturnUserSupportProgress");
            public static readonly PropertyInfo HordeMaxStage = typeof(IUserData).GetProperty("HordeMaxStage");
            public static readonly PropertyInfo EndlessLastLeagueId = typeof(IUserData).GetProperty("EndlessLastLeagueId");
            public static readonly PropertyInfo EndlessLastPlayTime = typeof(IUserData).GetProperty("EndlessLastPlayTime");
            public static readonly PropertyInfo EndlessMaxDistance = typeof(IUserData).GetProperty("EndlessMaxDistance");
            public static readonly PropertyInfo EndlessMaxDistanceRewardIndex = typeof(IUserData).GetProperty("EndlessMaxDistanceRewardIndex");
            public static readonly PropertyInfo Tutorial = typeof(IUserData).GetProperty("Tutorial");
            public static readonly PropertyInfo UserFlag = typeof(IUserData).GetProperty("UserFlag");
            public static readonly PropertyInfo UserConfigFlag = typeof(IUserData).GetProperty("UserConfigFlag");
            public static readonly PropertyInfo InvitedFriendCount = typeof(IUserData).GetProperty("InvitedFriendCount");
            public static readonly PropertyInfo RemainingQuickPlayCount = typeof(IUserData).GetProperty("RemainingQuickPlayCount");
            public static readonly PropertyInfo Comment = typeof(IUserData).GetProperty("Comment");
            public static readonly PropertyInfo CommentModifyTime = typeof(IUserData).GetProperty("CommentModifyTime");
            public static readonly PropertyInfo InventoryExtraSize = typeof(IUserData).GetProperty("InventoryExtraSize");
            public static readonly PropertyInfo GameFriendExtraSize = typeof(IUserData).GetProperty("GameFriendExtraSize");
            public static readonly PropertyInfo GroupExtraSize = typeof(IUserData).GetProperty("GroupExtraSize");
            public static readonly PropertyInfo GroupPostBoxExtraSize = typeof(IUserData).GetProperty("GroupPostBoxExtraSize");
            public static readonly PropertyInfo GroupPostBoxExtraTime = typeof(IUserData).GetProperty("GroupPostBoxExtraTime");
        }

        private string _Name;

        [ProtoMember(1)] public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(PropertyTable.Name, _Name, value);
                _Name = value;
            }
        }

        private string _EncPhotoUrl;

        [ProtoMember(2)] public string EncPhotoUrl
        {
            get
            {
                return _EncPhotoUrl;
            }
            set
            {
                if (Tracker != null && EncPhotoUrl != value)
                    Tracker.TrackSet(PropertyTable.EncPhotoUrl, _EncPhotoUrl, value);
                _EncPhotoUrl = value;
            }
        }

        private UserPermission _Permission;

        [ProtoMember(3)] public UserPermission Permission
        {
            get
            {
                return _Permission;
            }
            set
            {
                if (Tracker != null && Permission != value)
                    Tracker.TrackSet(PropertyTable.Permission, _Permission, value);
                _Permission = value;
            }
        }

        private int _Inviter;

        [ProtoMember(4)] public int Inviter
        {
            get
            {
                return _Inviter;
            }
            set
            {
                if (Tracker != null && Inviter != value)
                    Tracker.TrackSet(PropertyTable.Inviter, _Inviter, value);
                _Inviter = value;
            }
        }

        private int _LastItemId;

        [ProtoMember(5)] public int LastItemId
        {
            get
            {
                return _LastItemId;
            }
            set
            {
                if (Tracker != null && LastItemId != value)
                    Tracker.TrackSet(PropertyTable.LastItemId, _LastItemId, value);
                _LastItemId = value;
            }
        }

        private int _LastPostId;

        [ProtoMember(6)] public int LastPostId
        {
            get
            {
                return _LastPostId;
            }
            set
            {
                if (Tracker != null && LastPostId != value)
                    Tracker.TrackSet(PropertyTable.LastPostId, _LastPostId, value);
                _LastPostId = value;
            }
        }

        private short _Stamina;

        [ProtoMember(7)] public short Stamina
        {
            get
            {
                return _Stamina;
            }
            set
            {
                if (Tracker != null && Stamina != value)
                    Tracker.TrackSet(PropertyTable.Stamina, _Stamina, value);
                _Stamina = value;
            }
        }

        private DateTime _StaminaRefillTime;

        [ProtoMember(8)] public DateTime StaminaRefillTime
        {
            get
            {
                return _StaminaRefillTime;
            }
            set
            {
                if (Tracker != null && StaminaRefillTime != value)
                    Tracker.TrackSet(PropertyTable.StaminaRefillTime, _StaminaRefillTime, value);
                _StaminaRefillTime = value;
            }
        }

        private short _RaidStamina;

        [ProtoMember(9)] public short RaidStamina
        {
            get
            {
                return _RaidStamina;
            }
            set
            {
                if (Tracker != null && RaidStamina != value)
                    Tracker.TrackSet(PropertyTable.RaidStamina, _RaidStamina, value);
                _RaidStamina = value;
            }
        }

        private DateTime _RaidStaminaRefillTime;

        [ProtoMember(10)] public DateTime RaidStaminaRefillTime
        {
            get
            {
                return _RaidStaminaRefillTime;
            }
            set
            {
                if (Tracker != null && RaidStaminaRefillTime != value)
                    Tracker.TrackSet(PropertyTable.RaidStaminaRefillTime, _RaidStaminaRefillTime, value);
                _RaidStaminaRefillTime = value;
            }
        }

        private int _Gold;

        [ProtoMember(11)] public int Gold
        {
            get
            {
                return _Gold;
            }
            set
            {
                if (Tracker != null && Gold != value)
                    Tracker.TrackSet(PropertyTable.Gold, _Gold, value);
                _Gold = value;
            }
        }

        private int _RubyCash;

        [ProtoMember(12)] public int RubyCash
        {
            get
            {
                return _RubyCash;
            }
            set
            {
                if (Tracker != null && RubyCash != value)
                    Tracker.TrackSet(PropertyTable.RubyCash, _RubyCash, value);
                _RubyCash = value;
            }
        }

        private int _RubyEvent;

        [ProtoMember(13)] public int RubyEvent
        {
            get
            {
                return _RubyEvent;
            }
            set
            {
                if (Tracker != null && RubyEvent != value)
                    Tracker.TrackSet(PropertyTable.RubyEvent, _RubyEvent, value);
                _RubyEvent = value;
            }
        }

        private int _Fame;

        [ProtoMember(14)] public int Fame
        {
            get
            {
                return _Fame;
            }
            set
            {
                if (Tracker != null && Fame != value)
                    Tracker.TrackSet(PropertyTable.Fame, _Fame, value);
                _Fame = value;
            }
        }

        private int _Medal;

        [ProtoMember(15)] public int Medal
        {
            get
            {
                return _Medal;
            }
            set
            {
                if (Tracker != null && Medal != value)
                    Tracker.TrackSet(PropertyTable.Medal, _Medal, value);
                _Medal = value;
            }
        }

        private int _LuckyClover;

        [ProtoMember(16)] public int LuckyClover
        {
            get
            {
                return _LuckyClover;
            }
            set
            {
                if (Tracker != null && LuckyClover != value)
                    Tracker.TrackSet(PropertyTable.LuckyClover, _LuckyClover, value);
                _LuckyClover = value;
            }
        }

        private int _JackpotKey;

        [ProtoMember(17)] public int JackpotKey
        {
            get
            {
                return _JackpotKey;
            }
            set
            {
                if (Tracker != null && JackpotKey != value)
                    Tracker.TrackSet(PropertyTable.JackpotKey, _JackpotKey, value);
                _JackpotKey = value;
            }
        }

        private short _Rank;

        [ProtoMember(18)] public short Rank
        {
            get
            {
                return _Rank;
            }
            set
            {
                if (Tracker != null && Rank != value)
                    Tracker.TrackSet(PropertyTable.Rank, _Rank, value);
                _Rank = value;
            }
        }

        private short _VipLevel;

        [ProtoMember(19)] public short VipLevel
        {
            get
            {
                return _VipLevel;
            }
            set
            {
                if (Tracker != null && VipLevel != value)
                    Tracker.TrackSet(PropertyTable.VipLevel, _VipLevel, value);
                _VipLevel = value;
            }
        }

        private int _TotalMoneySpent;

        [ProtoMember(20)] public int TotalMoneySpent
        {
            get
            {
                return _TotalMoneySpent;
            }
            set
            {
                if (Tracker != null && TotalMoneySpent != value)
                    Tracker.TrackSet(PropertyTable.TotalMoneySpent, _TotalMoneySpent, value);
                _TotalMoneySpent = value;
            }
        }

        private byte _TankArmor;

        [ProtoMember(21)] public byte TankArmor
        {
            get
            {
                return _TankArmor;
            }
            set
            {
                if (Tracker != null && TankArmor != value)
                    Tracker.TrackSet(PropertyTable.TankArmor, _TankArmor, value);
                _TankArmor = value;
            }
        }

        private byte _TankEngine;

        [ProtoMember(22)] public byte TankEngine
        {
            get
            {
                return _TankEngine;
            }
            set
            {
                if (Tracker != null && TankEngine != value)
                    Tracker.TrackSet(PropertyTable.TankEngine, _TankEngine, value);
                _TankEngine = value;
            }
        }

        private byte _TankGoldBonus;

        [ProtoMember(23)] public byte TankGoldBonus
        {
            get
            {
                return _TankGoldBonus;
            }
            set
            {
                if (Tracker != null && TankGoldBonus != value)
                    Tracker.TrackSet(PropertyTable.TankGoldBonus, _TankGoldBonus, value);
                _TankGoldBonus = value;
            }
        }

        private byte _TankSeats;

        [ProtoMember(24)] public byte TankSeats
        {
            get
            {
                return _TankSeats;
            }
            set
            {
                if (Tracker != null && TankSeats != value)
                    Tracker.TrackSet(PropertyTable.TankSeats, _TankSeats, value);
                _TankSeats = value;
            }
        }

        private int _MaxStage;

        [ProtoMember(25)] public int MaxStage
        {
            get
            {
                return _MaxStage;
            }
            set
            {
                if (Tracker != null && MaxStage != value)
                    Tracker.TrackSet(PropertyTable.MaxStage, _MaxStage, value);
                _MaxStage = value;
            }
        }

        private int _MainStage;

        [ProtoMember(26)] public int MainStage
        {
            get
            {
                return _MainStage;
            }
            set
            {
                if (Tracker != null && MainStage != value)
                    Tracker.TrackSet(PropertyTable.MainStage, _MainStage, value);
                _MainStage = value;
            }
        }

        private int _MainItemId;

        [ProtoMember(27)] public int MainItemId
        {
            get
            {
                return _MainItemId;
            }
            set
            {
                if (Tracker != null && MainItemId != value)
                    Tracker.TrackSet(PropertyTable.MainItemId, _MainItemId, value);
                _MainItemId = value;
            }
        }

        private int _MainTankId;

        [ProtoMember(28)] public int MainTankId
        {
            get
            {
                return _MainTankId;
            }
            set
            {
                if (Tracker != null && MainTankId != value)
                    Tracker.TrackSet(PropertyTable.MainTankId, _MainTankId, value);
                _MainTankId = value;
            }
        }

        private DateTime _DayChangeTime;

        [ProtoMember(29)] public DateTime DayChangeTime
        {
            get
            {
                return _DayChangeTime;
            }
            set
            {
                if (Tracker != null && DayChangeTime != value)
                    Tracker.TrackSet(PropertyTable.DayChangeTime, _DayChangeTime, value);
                _DayChangeTime = value;
            }
        }

        private byte _MissionReplaceCount;

        [ProtoMember(30)] public byte MissionReplaceCount
        {
            get
            {
                return _MissionReplaceCount;
            }
            set
            {
                if (Tracker != null && MissionReplaceCount != value)
                    Tracker.TrackSet(PropertyTable.MissionReplaceCount, _MissionReplaceCount, value);
                _MissionReplaceCount = value;
            }
        }

        private byte _FestivalVisitProgress;

        [ProtoMember(31)] public byte FestivalVisitProgress
        {
            get
            {
                return _FestivalVisitProgress;
            }
            set
            {
                if (Tracker != null && FestivalVisitProgress != value)
                    Tracker.TrackSet(PropertyTable.FestivalVisitProgress, _FestivalVisitProgress, value);
                _FestivalVisitProgress = value;
            }
        }

        private int _FestivalPreRegistrationId;

        [ProtoMember(32)] public int FestivalPreRegistrationId
        {
            get
            {
                return _FestivalPreRegistrationId;
            }
            set
            {
                if (Tracker != null && FestivalPreRegistrationId != value)
                    Tracker.TrackSet(PropertyTable.FestivalPreRegistrationId, _FestivalPreRegistrationId, value);
                _FestivalPreRegistrationId = value;
            }
        }

        private byte _FestivalPreRegistrationProgress;

        [ProtoMember(33)] public byte FestivalPreRegistrationProgress
        {
            get
            {
                return _FestivalPreRegistrationProgress;
            }
            set
            {
                if (Tracker != null && FestivalPreRegistrationProgress != value)
                    Tracker.TrackSet(PropertyTable.FestivalPreRegistrationProgress, _FestivalPreRegistrationProgress, value);
                _FestivalPreRegistrationProgress = value;
            }
        }

        private byte _FestivalNewUserSupportProgress;

        [ProtoMember(34)] public byte FestivalNewUserSupportProgress
        {
            get
            {
                return _FestivalNewUserSupportProgress;
            }
            set
            {
                if (Tracker != null && FestivalNewUserSupportProgress != value)
                    Tracker.TrackSet(PropertyTable.FestivalNewUserSupportProgress, _FestivalNewUserSupportProgress, value);
                _FestivalNewUserSupportProgress = value;
            }
        }

        private int _FestivalInviteFriendsId;

        [ProtoMember(35)] public int FestivalInviteFriendsId
        {
            get
            {
                return _FestivalInviteFriendsId;
            }
            set
            {
                if (Tracker != null && FestivalInviteFriendsId != value)
                    Tracker.TrackSet(PropertyTable.FestivalInviteFriendsId, _FestivalInviteFriendsId, value);
                _FestivalInviteFriendsId = value;
            }
        }

        private byte _FestivalInvitedFriendRankRewardProgress;

        [ProtoMember(36)] public byte FestivalInvitedFriendRankRewardProgress
        {
            get
            {
                return _FestivalInvitedFriendRankRewardProgress;
            }
            set
            {
                if (Tracker != null && FestivalInvitedFriendRankRewardProgress != value)
                    Tracker.TrackSet(PropertyTable.FestivalInvitedFriendRankRewardProgress, _FestivalInvitedFriendRankRewardProgress, value);
                _FestivalInvitedFriendRankRewardProgress = value;
            }
        }

        private byte _FestivalReturnUserSupportProgress;

        [ProtoMember(37)] public byte FestivalReturnUserSupportProgress
        {
            get
            {
                return _FestivalReturnUserSupportProgress;
            }
            set
            {
                if (Tracker != null && FestivalReturnUserSupportProgress != value)
                    Tracker.TrackSet(PropertyTable.FestivalReturnUserSupportProgress, _FestivalReturnUserSupportProgress, value);
                _FestivalReturnUserSupportProgress = value;
            }
        }

        private int _HordeMaxStage;

        [ProtoMember(38)] public int HordeMaxStage
        {
            get
            {
                return _HordeMaxStage;
            }
            set
            {
                if (Tracker != null && HordeMaxStage != value)
                    Tracker.TrackSet(PropertyTable.HordeMaxStage, _HordeMaxStage, value);
                _HordeMaxStage = value;
            }
        }

        private int _EndlessLastLeagueId;

        [ProtoMember(39)] public int EndlessLastLeagueId
        {
            get
            {
                return _EndlessLastLeagueId;
            }
            set
            {
                if (Tracker != null && EndlessLastLeagueId != value)
                    Tracker.TrackSet(PropertyTable.EndlessLastLeagueId, _EndlessLastLeagueId, value);
                _EndlessLastLeagueId = value;
            }
        }

        private DateTime _EndlessLastPlayTime;

        [ProtoMember(40)] public DateTime EndlessLastPlayTime
        {
            get
            {
                return _EndlessLastPlayTime;
            }
            set
            {
                if (Tracker != null && EndlessLastPlayTime != value)
                    Tracker.TrackSet(PropertyTable.EndlessLastPlayTime, _EndlessLastPlayTime, value);
                _EndlessLastPlayTime = value;
            }
        }

        private int _EndlessMaxDistance;

        [ProtoMember(41)] public int EndlessMaxDistance
        {
            get
            {
                return _EndlessMaxDistance;
            }
            set
            {
                if (Tracker != null && EndlessMaxDistance != value)
                    Tracker.TrackSet(PropertyTable.EndlessMaxDistance, _EndlessMaxDistance, value);
                _EndlessMaxDistance = value;
            }
        }

        private int _EndlessMaxDistanceRewardIndex;

        [ProtoMember(42)] public int EndlessMaxDistanceRewardIndex
        {
            get
            {
                return _EndlessMaxDistanceRewardIndex;
            }
            set
            {
                if (Tracker != null && EndlessMaxDistanceRewardIndex != value)
                    Tracker.TrackSet(PropertyTable.EndlessMaxDistanceRewardIndex, _EndlessMaxDistanceRewardIndex, value);
                _EndlessMaxDistanceRewardIndex = value;
            }
        }

        private UserTutorial _Tutorial;

        [ProtoMember(43)] public UserTutorial Tutorial
        {
            get
            {
                return _Tutorial;
            }
            set
            {
                if (Tracker != null && Tutorial != value)
                    Tracker.TrackSet(PropertyTable.Tutorial, _Tutorial, value);
                _Tutorial = value;
            }
        }

        private UserFlag _UserFlag;

        [ProtoMember(44)] public UserFlag UserFlag
        {
            get
            {
                return _UserFlag;
            }
            set
            {
                if (Tracker != null && UserFlag != value)
                    Tracker.TrackSet(PropertyTable.UserFlag, _UserFlag, value);
                _UserFlag = value;
            }
        }

        private UserConfigFlag _UserConfigFlag;

        [ProtoMember(45)] public UserConfigFlag UserConfigFlag
        {
            get
            {
                return _UserConfigFlag;
            }
            set
            {
                if (Tracker != null && UserConfigFlag != value)
                    Tracker.TrackSet(PropertyTable.UserConfigFlag, _UserConfigFlag, value);
                _UserConfigFlag = value;
            }
        }

        private int _InvitedFriendCount;

        [ProtoMember(46)] public int InvitedFriendCount
        {
            get
            {
                return _InvitedFriendCount;
            }
            set
            {
                if (Tracker != null && InvitedFriendCount != value)
                    Tracker.TrackSet(PropertyTable.InvitedFriendCount, _InvitedFriendCount, value);
                _InvitedFriendCount = value;
            }
        }

        private int _RemainingQuickPlayCount;

        [ProtoMember(47)] public int RemainingQuickPlayCount
        {
            get
            {
                return _RemainingQuickPlayCount;
            }
            set
            {
                if (Tracker != null && RemainingQuickPlayCount != value)
                    Tracker.TrackSet(PropertyTable.RemainingQuickPlayCount, _RemainingQuickPlayCount, value);
                _RemainingQuickPlayCount = value;
            }
        }

        private string _Comment;

        [ProtoMember(48)] public string Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                if (Tracker != null && Comment != value)
                    Tracker.TrackSet(PropertyTable.Comment, _Comment, value);
                _Comment = value;
            }
        }

        private DateTime _CommentModifyTime;

        [ProtoMember(49)] public DateTime CommentModifyTime
        {
            get
            {
                return _CommentModifyTime;
            }
            set
            {
                if (Tracker != null && CommentModifyTime != value)
                    Tracker.TrackSet(PropertyTable.CommentModifyTime, _CommentModifyTime, value);
                _CommentModifyTime = value;
            }
        }

        private short _InventoryExtraSize;

        [ProtoMember(50)] public short InventoryExtraSize
        {
            get
            {
                return _InventoryExtraSize;
            }
            set
            {
                if (Tracker != null && InventoryExtraSize != value)
                    Tracker.TrackSet(PropertyTable.InventoryExtraSize, _InventoryExtraSize, value);
                _InventoryExtraSize = value;
            }
        }

        private byte _GameFriendExtraSize;

        [ProtoMember(51)] public byte GameFriendExtraSize
        {
            get
            {
                return _GameFriendExtraSize;
            }
            set
            {
                if (Tracker != null && GameFriendExtraSize != value)
                    Tracker.TrackSet(PropertyTable.GameFriendExtraSize, _GameFriendExtraSize, value);
                _GameFriendExtraSize = value;
            }
        }

        private byte _GroupExtraSize;

        [ProtoMember(52)] public byte GroupExtraSize
        {
            get
            {
                return _GroupExtraSize;
            }
            set
            {
                if (Tracker != null && GroupExtraSize != value)
                    Tracker.TrackSet(PropertyTable.GroupExtraSize, _GroupExtraSize, value);
                _GroupExtraSize = value;
            }
        }

        private byte _GroupPostBoxExtraSize;

        [ProtoMember(53)] public byte GroupPostBoxExtraSize
        {
            get
            {
                return _GroupPostBoxExtraSize;
            }
            set
            {
                if (Tracker != null && GroupPostBoxExtraSize != value)
                    Tracker.TrackSet(PropertyTable.GroupPostBoxExtraSize, _GroupPostBoxExtraSize, value);
                _GroupPostBoxExtraSize = value;
            }
        }

        private byte _GroupPostBoxExtraTime;

        [ProtoMember(54)] public byte GroupPostBoxExtraTime
        {
            get
            {
                return _GroupPostBoxExtraTime;
            }
            set
            {
                if (Tracker != null && GroupPostBoxExtraTime != value)
                    Tracker.TrackSet(PropertyTable.GroupPostBoxExtraTime, _GroupPostBoxExtraTime, value);
                _GroupPostBoxExtraTime = value;
            }
        }
    }

    [ProtoContract]
    public class TrackableUserDataTrackerSurrogate
    {
        [ProtoMember(1)] public EnvelopedObject<string> Name;
        [ProtoMember(2)] public EnvelopedObject<string> EncPhotoUrl;
        [ProtoMember(3)] public EnvelopedObject<UserPermission> Permission;
        [ProtoMember(4)] public EnvelopedObject<int> Inviter;
        [ProtoMember(5)] public EnvelopedObject<int> LastItemId;
        [ProtoMember(6)] public EnvelopedObject<int> LastPostId;
        [ProtoMember(7)] public EnvelopedObject<short> Stamina;
        [ProtoMember(8)] public EnvelopedObject<DateTime> StaminaRefillTime;
        [ProtoMember(9)] public EnvelopedObject<short> RaidStamina;
        [ProtoMember(10)] public EnvelopedObject<DateTime> RaidStaminaRefillTime;
        [ProtoMember(11)] public EnvelopedObject<int> Gold;
        [ProtoMember(12)] public EnvelopedObject<int> RubyCash;
        [ProtoMember(13)] public EnvelopedObject<int> RubyEvent;
        [ProtoMember(14)] public EnvelopedObject<int> Fame;
        [ProtoMember(15)] public EnvelopedObject<int> Medal;
        [ProtoMember(16)] public EnvelopedObject<int> LuckyClover;
        [ProtoMember(17)] public EnvelopedObject<int> JackpotKey;
        [ProtoMember(18)] public EnvelopedObject<short> Rank;
        [ProtoMember(19)] public EnvelopedObject<short> VipLevel;
        [ProtoMember(20)] public EnvelopedObject<int> TotalMoneySpent;
        [ProtoMember(21)] public EnvelopedObject<byte> TankArmor;
        [ProtoMember(22)] public EnvelopedObject<byte> TankEngine;
        [ProtoMember(23)] public EnvelopedObject<byte> TankGoldBonus;
        [ProtoMember(24)] public EnvelopedObject<byte> TankSeats;
        [ProtoMember(25)] public EnvelopedObject<int> MaxStage;
        [ProtoMember(26)] public EnvelopedObject<int> MainStage;
        [ProtoMember(27)] public EnvelopedObject<int> MainItemId;
        [ProtoMember(28)] public EnvelopedObject<int> MainTankId;
        [ProtoMember(29)] public EnvelopedObject<DateTime> DayChangeTime;
        [ProtoMember(30)] public EnvelopedObject<byte> MissionReplaceCount;
        [ProtoMember(31)] public EnvelopedObject<byte> FestivalVisitProgress;
        [ProtoMember(32)] public EnvelopedObject<int> FestivalPreRegistrationId;
        [ProtoMember(33)] public EnvelopedObject<byte> FestivalPreRegistrationProgress;
        [ProtoMember(34)] public EnvelopedObject<byte> FestivalNewUserSupportProgress;
        [ProtoMember(35)] public EnvelopedObject<int> FestivalInviteFriendsId;
        [ProtoMember(36)] public EnvelopedObject<byte> FestivalInvitedFriendRankRewardProgress;
        [ProtoMember(37)] public EnvelopedObject<byte> FestivalReturnUserSupportProgress;
        [ProtoMember(38)] public EnvelopedObject<int> HordeMaxStage;
        [ProtoMember(39)] public EnvelopedObject<int> EndlessLastLeagueId;
        [ProtoMember(40)] public EnvelopedObject<DateTime> EndlessLastPlayTime;
        [ProtoMember(41)] public EnvelopedObject<int> EndlessMaxDistance;
        [ProtoMember(42)] public EnvelopedObject<int> EndlessMaxDistanceRewardIndex;
        [ProtoMember(43)] public EnvelopedObject<UserTutorial> Tutorial;
        [ProtoMember(44)] public EnvelopedObject<UserFlag> UserFlag;
        [ProtoMember(45)] public EnvelopedObject<UserConfigFlag> UserConfigFlag;
        [ProtoMember(46)] public EnvelopedObject<int> InvitedFriendCount;
        [ProtoMember(47)] public EnvelopedObject<int> RemainingQuickPlayCount;
        [ProtoMember(48)] public EnvelopedObject<string> Comment;
        [ProtoMember(49)] public EnvelopedObject<DateTime> CommentModifyTime;
        [ProtoMember(50)] public EnvelopedObject<short> InventoryExtraSize;
        [ProtoMember(51)] public EnvelopedObject<byte> GameFriendExtraSize;
        [ProtoMember(52)] public EnvelopedObject<byte> GroupExtraSize;
        [ProtoMember(53)] public EnvelopedObject<byte> GroupPostBoxExtraSize;
        [ProtoMember(54)] public EnvelopedObject<byte> GroupPostBoxExtraTime;

        public static implicit operator TrackableUserDataTrackerSurrogate(TrackablePocoTracker<IUserData> tracker)
        {
            if (tracker == null)
                return null;

            var surrogate = new TrackableUserDataTrackerSurrogate();
            foreach(var changeItem in tracker.ChangeMap)
            {
                switch (changeItem.Key.Name)
                {
                    case "Name":
                        surrogate.Name = new EnvelopedObject<string> { Value = (string)changeItem.Value.NewValue };
                        break;
                    case "EncPhotoUrl":
                        surrogate.EncPhotoUrl = new EnvelopedObject<string> { Value = (string)changeItem.Value.NewValue };
                        break;
                    case "Permission":
                        surrogate.Permission = new EnvelopedObject<UserPermission> { Value = (UserPermission)changeItem.Value.NewValue };
                        break;
                    case "Inviter":
                        surrogate.Inviter = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "LastItemId":
                        surrogate.LastItemId = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "LastPostId":
                        surrogate.LastPostId = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "Stamina":
                        surrogate.Stamina = new EnvelopedObject<short> { Value = (short)changeItem.Value.NewValue };
                        break;
                    case "StaminaRefillTime":
                        surrogate.StaminaRefillTime = new EnvelopedObject<DateTime> { Value = (DateTime)changeItem.Value.NewValue };
                        break;
                    case "RaidStamina":
                        surrogate.RaidStamina = new EnvelopedObject<short> { Value = (short)changeItem.Value.NewValue };
                        break;
                    case "RaidStaminaRefillTime":
                        surrogate.RaidStaminaRefillTime = new EnvelopedObject<DateTime> { Value = (DateTime)changeItem.Value.NewValue };
                        break;
                    case "Gold":
                        surrogate.Gold = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "RubyCash":
                        surrogate.RubyCash = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "RubyEvent":
                        surrogate.RubyEvent = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "Fame":
                        surrogate.Fame = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "Medal":
                        surrogate.Medal = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "LuckyClover":
                        surrogate.LuckyClover = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "JackpotKey":
                        surrogate.JackpotKey = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "Rank":
                        surrogate.Rank = new EnvelopedObject<short> { Value = (short)changeItem.Value.NewValue };
                        break;
                    case "VipLevel":
                        surrogate.VipLevel = new EnvelopedObject<short> { Value = (short)changeItem.Value.NewValue };
                        break;
                    case "TotalMoneySpent":
                        surrogate.TotalMoneySpent = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "TankArmor":
                        surrogate.TankArmor = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "TankEngine":
                        surrogate.TankEngine = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "TankGoldBonus":
                        surrogate.TankGoldBonus = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "TankSeats":
                        surrogate.TankSeats = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "MaxStage":
                        surrogate.MaxStage = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "MainStage":
                        surrogate.MainStage = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "MainItemId":
                        surrogate.MainItemId = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "MainTankId":
                        surrogate.MainTankId = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "DayChangeTime":
                        surrogate.DayChangeTime = new EnvelopedObject<DateTime> { Value = (DateTime)changeItem.Value.NewValue };
                        break;
                    case "MissionReplaceCount":
                        surrogate.MissionReplaceCount = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "FestivalVisitProgress":
                        surrogate.FestivalVisitProgress = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "FestivalPreRegistrationId":
                        surrogate.FestivalPreRegistrationId = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "FestivalPreRegistrationProgress":
                        surrogate.FestivalPreRegistrationProgress = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "FestivalNewUserSupportProgress":
                        surrogate.FestivalNewUserSupportProgress = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "FestivalInviteFriendsId":
                        surrogate.FestivalInviteFriendsId = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "FestivalInvitedFriendRankRewardProgress":
                        surrogate.FestivalInvitedFriendRankRewardProgress = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "FestivalReturnUserSupportProgress":
                        surrogate.FestivalReturnUserSupportProgress = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "HordeMaxStage":
                        surrogate.HordeMaxStage = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "EndlessLastLeagueId":
                        surrogate.EndlessLastLeagueId = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "EndlessLastPlayTime":
                        surrogate.EndlessLastPlayTime = new EnvelopedObject<DateTime> { Value = (DateTime)changeItem.Value.NewValue };
                        break;
                    case "EndlessMaxDistance":
                        surrogate.EndlessMaxDistance = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "EndlessMaxDistanceRewardIndex":
                        surrogate.EndlessMaxDistanceRewardIndex = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "Tutorial":
                        surrogate.Tutorial = new EnvelopedObject<UserTutorial> { Value = (UserTutorial)changeItem.Value.NewValue };
                        break;
                    case "UserFlag":
                        surrogate.UserFlag = new EnvelopedObject<UserFlag> { Value = (UserFlag)changeItem.Value.NewValue };
                        break;
                    case "UserConfigFlag":
                        surrogate.UserConfigFlag = new EnvelopedObject<UserConfigFlag> { Value = (UserConfigFlag)changeItem.Value.NewValue };
                        break;
                    case "InvitedFriendCount":
                        surrogate.InvitedFriendCount = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "RemainingQuickPlayCount":
                        surrogate.RemainingQuickPlayCount = new EnvelopedObject<int> { Value = (int)changeItem.Value.NewValue };
                        break;
                    case "Comment":
                        surrogate.Comment = new EnvelopedObject<string> { Value = (string)changeItem.Value.NewValue };
                        break;
                    case "CommentModifyTime":
                        surrogate.CommentModifyTime = new EnvelopedObject<DateTime> { Value = (DateTime)changeItem.Value.NewValue };
                        break;
                    case "InventoryExtraSize":
                        surrogate.InventoryExtraSize = new EnvelopedObject<short> { Value = (short)changeItem.Value.NewValue };
                        break;
                    case "GameFriendExtraSize":
                        surrogate.GameFriendExtraSize = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "GroupExtraSize":
                        surrogate.GroupExtraSize = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "GroupPostBoxExtraSize":
                        surrogate.GroupPostBoxExtraSize = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                    case "GroupPostBoxExtraTime":
                        surrogate.GroupPostBoxExtraTime = new EnvelopedObject<byte> { Value = (byte)changeItem.Value.NewValue };
                        break;
                }
            }
            return surrogate;
        }

        public static implicit operator TrackablePocoTracker<IUserData>(TrackableUserDataTrackerSurrogate surrogate)
        {
            if (surrogate == null)
                return null;

            var tracker = new TrackablePocoTracker<IUserData>();
            if (surrogate.Name != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Name, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Name.Value });
            if (surrogate.EncPhotoUrl != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.EncPhotoUrl, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.EncPhotoUrl.Value });
            if (surrogate.Permission != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Permission, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Permission.Value });
            if (surrogate.Inviter != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Inviter, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Inviter.Value });
            if (surrogate.LastItemId != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.LastItemId, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.LastItemId.Value });
            if (surrogate.LastPostId != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.LastPostId, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.LastPostId.Value });
            if (surrogate.Stamina != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Stamina, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Stamina.Value });
            if (surrogate.StaminaRefillTime != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.StaminaRefillTime, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.StaminaRefillTime.Value });
            if (surrogate.RaidStamina != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.RaidStamina, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.RaidStamina.Value });
            if (surrogate.RaidStaminaRefillTime != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.RaidStaminaRefillTime, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.RaidStaminaRefillTime.Value });
            if (surrogate.Gold != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Gold, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Gold.Value });
            if (surrogate.RubyCash != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.RubyCash, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.RubyCash.Value });
            if (surrogate.RubyEvent != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.RubyEvent, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.RubyEvent.Value });
            if (surrogate.Fame != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Fame, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Fame.Value });
            if (surrogate.Medal != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Medal, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Medal.Value });
            if (surrogate.LuckyClover != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.LuckyClover, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.LuckyClover.Value });
            if (surrogate.JackpotKey != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.JackpotKey, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.JackpotKey.Value });
            if (surrogate.Rank != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Rank, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Rank.Value });
            if (surrogate.VipLevel != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.VipLevel, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.VipLevel.Value });
            if (surrogate.TotalMoneySpent != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.TotalMoneySpent, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.TotalMoneySpent.Value });
            if (surrogate.TankArmor != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.TankArmor, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.TankArmor.Value });
            if (surrogate.TankEngine != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.TankEngine, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.TankEngine.Value });
            if (surrogate.TankGoldBonus != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.TankGoldBonus, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.TankGoldBonus.Value });
            if (surrogate.TankSeats != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.TankSeats, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.TankSeats.Value });
            if (surrogate.MaxStage != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.MaxStage, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.MaxStage.Value });
            if (surrogate.MainStage != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.MainStage, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.MainStage.Value });
            if (surrogate.MainItemId != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.MainItemId, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.MainItemId.Value });
            if (surrogate.MainTankId != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.MainTankId, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.MainTankId.Value });
            if (surrogate.DayChangeTime != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.DayChangeTime, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.DayChangeTime.Value });
            if (surrogate.MissionReplaceCount != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.MissionReplaceCount, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.MissionReplaceCount.Value });
            if (surrogate.FestivalVisitProgress != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.FestivalVisitProgress, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.FestivalVisitProgress.Value });
            if (surrogate.FestivalPreRegistrationId != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.FestivalPreRegistrationId, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.FestivalPreRegistrationId.Value });
            if (surrogate.FestivalPreRegistrationProgress != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.FestivalPreRegistrationProgress, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.FestivalPreRegistrationProgress.Value });
            if (surrogate.FestivalNewUserSupportProgress != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.FestivalNewUserSupportProgress, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.FestivalNewUserSupportProgress.Value });
            if (surrogate.FestivalInviteFriendsId != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.FestivalInviteFriendsId, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.FestivalInviteFriendsId.Value });
            if (surrogate.FestivalInvitedFriendRankRewardProgress != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.FestivalInvitedFriendRankRewardProgress, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.FestivalInvitedFriendRankRewardProgress.Value });
            if (surrogate.FestivalReturnUserSupportProgress != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.FestivalReturnUserSupportProgress, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.FestivalReturnUserSupportProgress.Value });
            if (surrogate.HordeMaxStage != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.HordeMaxStage, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.HordeMaxStage.Value });
            if (surrogate.EndlessLastLeagueId != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.EndlessLastLeagueId, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.EndlessLastLeagueId.Value });
            if (surrogate.EndlessLastPlayTime != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.EndlessLastPlayTime, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.EndlessLastPlayTime.Value });
            if (surrogate.EndlessMaxDistance != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.EndlessMaxDistance, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.EndlessMaxDistance.Value });
            if (surrogate.EndlessMaxDistanceRewardIndex != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.EndlessMaxDistanceRewardIndex, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.EndlessMaxDistanceRewardIndex.Value });
            if (surrogate.Tutorial != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Tutorial, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Tutorial.Value });
            if (surrogate.UserFlag != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.UserFlag, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.UserFlag.Value });
            if (surrogate.UserConfigFlag != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.UserConfigFlag, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.UserConfigFlag.Value });
            if (surrogate.InvitedFriendCount != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.InvitedFriendCount, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.InvitedFriendCount.Value });
            if (surrogate.RemainingQuickPlayCount != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.RemainingQuickPlayCount, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.RemainingQuickPlayCount.Value });
            if (surrogate.Comment != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.Comment, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.Comment.Value });
            if (surrogate.CommentModifyTime != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.CommentModifyTime, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.CommentModifyTime.Value });
            if (surrogate.InventoryExtraSize != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.InventoryExtraSize, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.InventoryExtraSize.Value });
            if (surrogate.GameFriendExtraSize != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.GameFriendExtraSize, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.GameFriendExtraSize.Value });
            if (surrogate.GroupExtraSize != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.GroupExtraSize, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.GroupExtraSize.Value });
            if (surrogate.GroupPostBoxExtraSize != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.GroupPostBoxExtraSize, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.GroupPostBoxExtraSize.Value });
            if (surrogate.GroupPostBoxExtraTime != null)
                tracker.ChangeMap.Add(TrackableUserData.PropertyTable.GroupPostBoxExtraTime, new TrackablePocoTracker<IUserData>.Change { NewValue = surrogate.GroupPostBoxExtraTime.Value });
            return tracker;
        }
    }
}

#endregion

#region IUserContext

namespace Model
{
    [ProtoContract]
    public class TrackableUserContext : IUserContext, ITrackable<IUserContext>
    {
        [IgnoreDataMember]
        private TrackableUserContextTracker _tracker;

        [IgnoreDataMember]
        public TrackableUserContextTracker Tracker
        {
            get
            {
                return _tracker;
            }
            set
            {
                _tracker = value;
                Data.Tracker = value?.DataTracker;
                Items.Tracker = value?.ItemsTracker;
                Teams.Tracker = value?.TeamsTracker;
                Tanks.Tracker = value?.TanksTracker;
                Cards.Tracker = value?.CardsTracker;
                Friends.Tracker = value?.FriendsTracker;
                Missions.Tracker = value?.MissionsTracker;
                StageGrades.Tracker = value?.StageGradesTracker;
                Posts.Tracker = value?.PostsTracker;
            }
        }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableUserContextTracker)value;
                Tracker = t;
            }
        }

        ITracker<IUserContext> ITrackable<IUserContext>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackableUserContextTracker)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                case "Data":
                    return Data as ITrackable;
                case "Items":
                    return Items as ITrackable;
                case "Teams":
                    return Teams as ITrackable;
                case "Tanks":
                    return Tanks as ITrackable;
                case "Cards":
                    return Cards as ITrackable;
                case "Friends":
                    return Friends as ITrackable;
                case "Missions":
                    return Missions as ITrackable;
                case "StageGrades":
                    return StageGrades as ITrackable;
                case "Posts":
                    return Posts as ITrackable;
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            var trackableData = Data as ITrackable;
            if (trackableData != null && (changedOnly == false || trackableData.Changed))
                yield return new KeyValuePair<object, ITrackable>("Data", trackableData);
            var trackableItems = Items as ITrackable;
            if (trackableItems != null && (changedOnly == false || trackableItems.Changed))
                yield return new KeyValuePair<object, ITrackable>("Items", trackableItems);
            var trackableTeams = Teams as ITrackable;
            if (trackableTeams != null && (changedOnly == false || trackableTeams.Changed))
                yield return new KeyValuePair<object, ITrackable>("Teams", trackableTeams);
            var trackableTanks = Tanks as ITrackable;
            if (trackableTanks != null && (changedOnly == false || trackableTanks.Changed))
                yield return new KeyValuePair<object, ITrackable>("Tanks", trackableTanks);
            var trackableCards = Cards as ITrackable;
            if (trackableCards != null && (changedOnly == false || trackableCards.Changed))
                yield return new KeyValuePair<object, ITrackable>("Cards", trackableCards);
            var trackableFriends = Friends as ITrackable;
            if (trackableFriends != null && (changedOnly == false || trackableFriends.Changed))
                yield return new KeyValuePair<object, ITrackable>("Friends", trackableFriends);
            var trackableMissions = Missions as ITrackable;
            if (trackableMissions != null && (changedOnly == false || trackableMissions.Changed))
                yield return new KeyValuePair<object, ITrackable>("Missions", trackableMissions);
            var trackableStageGrades = StageGrades as ITrackable;
            if (trackableStageGrades != null && (changedOnly == false || trackableStageGrades.Changed))
                yield return new KeyValuePair<object, ITrackable>("StageGrades", trackableStageGrades);
            var trackablePosts = Posts as ITrackable;
            if (trackablePosts != null && (changedOnly == false || trackablePosts.Changed))
                yield return new KeyValuePair<object, ITrackable>("Posts", trackablePosts);
        }

        private TrackableUserData _Data;

        [ProtoMember(1)] public TrackableUserData Data
        {
            get
            {
                return _Data;
            }
            set
            {
                if (_Data != null)
                    _Data.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.DataTracker;
                _Data = value;
            }
        }

        TrackableUserData IUserContext.Data
        {
            get { return _Data; }
            set { _Data = (TrackableUserData)value; }
        }

        private TrackableDictionary<int, UserItem> _Items;

        [ProtoMember(2)] public TrackableDictionary<int, UserItem> Items
        {
            get
            {
                return _Items;
            }
            set
            {
                if (_Items != null)
                    _Items.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.ItemsTracker;
                _Items = value;
            }
        }

        TrackableDictionary<int, UserItem> IUserContext.Items
        {
            get { return _Items; }
            set { _Items = (TrackableDictionary<int, UserItem>)value; }
        }

        private TrackableDictionary<byte, UserTeam> _Teams;

        [ProtoMember(3)] public TrackableDictionary<byte, UserTeam> Teams
        {
            get
            {
                return _Teams;
            }
            set
            {
                if (_Teams != null)
                    _Teams.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.TeamsTracker;
                _Teams = value;
            }
        }

        TrackableDictionary<byte, UserTeam> IUserContext.Teams
        {
            get { return _Teams; }
            set { _Teams = (TrackableDictionary<byte, UserTeam>)value; }
        }

        private TrackableDictionary<int, UserTank> _Tanks;

        [ProtoMember(4)] public TrackableDictionary<int, UserTank> Tanks
        {
            get
            {
                return _Tanks;
            }
            set
            {
                if (_Tanks != null)
                    _Tanks.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.TanksTracker;
                _Tanks = value;
            }
        }

        TrackableDictionary<int, UserTank> IUserContext.Tanks
        {
            get { return _Tanks; }
            set { _Tanks = (TrackableDictionary<int, UserTank>)value; }
        }

        private TrackableDictionary<byte, long> _Cards;

        [ProtoMember(5)] public TrackableDictionary<byte, long> Cards
        {
            get
            {
                return _Cards;
            }
            set
            {
                if (_Cards != null)
                    _Cards.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.CardsTracker;
                _Cards = value;
            }
        }

        TrackableDictionary<byte, long> IUserContext.Cards
        {
            get { return _Cards; }
            set { _Cards = (TrackableDictionary<byte, long>)value; }
        }

        private TrackableDictionary<int, UserFriend> _Friends;

        [ProtoMember(6)] public TrackableDictionary<int, UserFriend> Friends
        {
            get
            {
                return _Friends;
            }
            set
            {
                if (_Friends != null)
                    _Friends.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.FriendsTracker;
                _Friends = value;
            }
        }

        TrackableDictionary<int, UserFriend> IUserContext.Friends
        {
            get { return _Friends; }
            set { _Friends = (TrackableDictionary<int, UserFriend>)value; }
        }

        private TrackableDictionary<byte, UserMission> _Missions;

        [ProtoMember(7)] public TrackableDictionary<byte, UserMission> Missions
        {
            get
            {
                return _Missions;
            }
            set
            {
                if (_Missions != null)
                    _Missions.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.MissionsTracker;
                _Missions = value;
            }
        }

        TrackableDictionary<byte, UserMission> IUserContext.Missions
        {
            get { return _Missions; }
            set { _Missions = (TrackableDictionary<byte, UserMission>)value; }
        }

        private TrackableDictionary<byte, long> _StageGrades;

        [ProtoMember(8)] public TrackableDictionary<byte, long> StageGrades
        {
            get
            {
                return _StageGrades;
            }
            set
            {
                if (_StageGrades != null)
                    _StageGrades.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.StageGradesTracker;
                _StageGrades = value;
            }
        }

        TrackableDictionary<byte, long> IUserContext.StageGrades
        {
            get { return _StageGrades; }
            set { _StageGrades = (TrackableDictionary<byte, long>)value; }
        }

        private TrackableDictionary<int, UserPost> _Posts;

        [ProtoMember(9)] public TrackableDictionary<int, UserPost> Posts
        {
            get
            {
                return _Posts;
            }
            set
            {
                if (_Posts != null)
                    _Posts.Tracker = null;
                if (value != null)
                    value.Tracker = Tracker?.PostsTracker;
                _Posts = value;
            }
        }

        TrackableDictionary<int, UserPost> IUserContext.Posts
        {
            get { return _Posts; }
            set { _Posts = (TrackableDictionary<int, UserPost>)value; }
        }
    }

    [ProtoContract]
    public class TrackableUserContextTracker : IContainerTracker<IUserContext>
    {
        [ProtoMember(1)] public TrackablePocoTracker<IUserData> DataTracker = new TrackablePocoTracker<IUserData>();
        [ProtoMember(2)] public TrackableDictionaryTracker<int, UserItem> ItemsTracker = new TrackableDictionaryTracker<int, UserItem>();
        [ProtoMember(3)] public TrackableDictionaryTracker<byte, UserTeam> TeamsTracker = new TrackableDictionaryTracker<byte, UserTeam>();
        [ProtoMember(4)] public TrackableDictionaryTracker<int, UserTank> TanksTracker = new TrackableDictionaryTracker<int, UserTank>();
        [ProtoMember(5)] public TrackableDictionaryTracker<byte, long> CardsTracker = new TrackableDictionaryTracker<byte, long>();
        [ProtoMember(6)] public TrackableDictionaryTracker<int, UserFriend> FriendsTracker = new TrackableDictionaryTracker<int, UserFriend>();
        [ProtoMember(7)] public TrackableDictionaryTracker<byte, UserMission> MissionsTracker = new TrackableDictionaryTracker<byte, UserMission>();
        [ProtoMember(8)] public TrackableDictionaryTracker<byte, long> StageGradesTracker = new TrackableDictionaryTracker<byte, long>();
        [ProtoMember(9)] public TrackableDictionaryTracker<int, UserPost> PostsTracker = new TrackableDictionaryTracker<int, UserPost>();

        public bool HasChange
        {
            get
            {
                return
                    DataTracker.HasChange ||
                    ItemsTracker.HasChange ||
                    TeamsTracker.HasChange ||
                    TanksTracker.HasChange ||
                    CardsTracker.HasChange ||
                    FriendsTracker.HasChange ||
                    MissionsTracker.HasChange ||
                    StageGradesTracker.HasChange ||
                    PostsTracker.HasChange ||
                    false;
            }
        }

        public void Clear()
        {
            DataTracker.Clear();
            ItemsTracker.Clear();
            TeamsTracker.Clear();
            TanksTracker.Clear();
            CardsTracker.Clear();
            FriendsTracker.Clear();
            MissionsTracker.Clear();
            StageGradesTracker.Clear();
            PostsTracker.Clear();
        }

        public void ApplyTo(object trackable)
        {
            ApplyTo((IUserContext)trackable);
        }

        public void ApplyTo(IUserContext trackable)
        {
            DataTracker.ApplyTo(trackable.Data);
            ItemsTracker.ApplyTo(trackable.Items);
            TeamsTracker.ApplyTo(trackable.Teams);
            TanksTracker.ApplyTo(trackable.Tanks);
            CardsTracker.ApplyTo(trackable.Cards);
            FriendsTracker.ApplyTo(trackable.Friends);
            MissionsTracker.ApplyTo(trackable.Missions);
            StageGradesTracker.ApplyTo(trackable.StageGrades);
            PostsTracker.ApplyTo(trackable.Posts);
        }

        public void ApplyTo(ITracker tracker)
        {
            ApplyTo((TrackableUserContextTracker)tracker);
        }

        public void ApplyTo(ITracker<IUserContext> tracker)
        {
            ApplyTo((TrackableUserContextTracker)tracker);
        }

        public void ApplyTo(TrackableUserContextTracker tracker)
        {
            DataTracker.ApplyTo(tracker.DataTracker);
            ItemsTracker.ApplyTo(tracker.ItemsTracker);
            TeamsTracker.ApplyTo(tracker.TeamsTracker);
            TanksTracker.ApplyTo(tracker.TanksTracker);
            CardsTracker.ApplyTo(tracker.CardsTracker);
            FriendsTracker.ApplyTo(tracker.FriendsTracker);
            MissionsTracker.ApplyTo(tracker.MissionsTracker);
            StageGradesTracker.ApplyTo(tracker.StageGradesTracker);
            PostsTracker.ApplyTo(tracker.PostsTracker);
        }

        public void RollbackTo(object trackable)
        {
            RollbackTo((IUserContext)trackable);
        }

        public void RollbackTo(IUserContext trackable)
        {
            DataTracker.RollbackTo(trackable.Data);
            ItemsTracker.RollbackTo(trackable.Items);
            TeamsTracker.RollbackTo(trackable.Teams);
            TanksTracker.RollbackTo(trackable.Tanks);
            CardsTracker.RollbackTo(trackable.Cards);
            FriendsTracker.RollbackTo(trackable.Friends);
            MissionsTracker.RollbackTo(trackable.Missions);
            StageGradesTracker.RollbackTo(trackable.StageGrades);
            PostsTracker.RollbackTo(trackable.Posts);
        }

        public void RollbackTo(ITracker tracker)
        {
            RollbackTo((TrackableUserContextTracker)tracker);
        }

        public void RollbackTo(ITracker<IUserContext> tracker)
        {
            RollbackTo((TrackableUserContextTracker)tracker);
        }

        public void RollbackTo(TrackableUserContextTracker tracker)
        {
            DataTracker.RollbackTo(tracker.DataTracker);
            ItemsTracker.RollbackTo(tracker.ItemsTracker);
            TeamsTracker.RollbackTo(tracker.TeamsTracker);
            TanksTracker.RollbackTo(tracker.TanksTracker);
            CardsTracker.RollbackTo(tracker.CardsTracker);
            FriendsTracker.RollbackTo(tracker.FriendsTracker);
            MissionsTracker.RollbackTo(tracker.MissionsTracker);
            StageGradesTracker.RollbackTo(tracker.StageGradesTracker);
            PostsTracker.RollbackTo(tracker.PostsTracker);
        }
    }
}

#endregion
