// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.Serialization;
using TrackableData;
using ProtoBuf;
using System.ComponentModel;

#region TrackableData.Protobuf.Tests.Data.Hand

namespace TrackableData.Protobuf.Tests.Data
{
    [ProtoContract]
    public class TrackableHand : Hand, ITrackable<Hand>
    {
        [IgnoreDataMember]
        public TrackablePocoTracker<Hand> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<Hand>)value;
                Tracker = t;
            }
        }

        ITracker<Hand> ITrackable<Hand>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<Hand>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                case "MainRing":
                    return MainRing as ITrackable;
                case "SubRing":
                    return SubRing as ITrackable;
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            var trackableMainRing = MainRing as ITrackable;
            if (trackableMainRing != null && (changedOnly == false || trackableMainRing.Changed))
                yield return new KeyValuePair<object, ITrackable>("MainRing", trackableMainRing);
            var trackableSubRing = SubRing as ITrackable;
            if (trackableSubRing != null && (changedOnly == false || trackableSubRing.Changed))
                yield return new KeyValuePair<object, ITrackable>("SubRing", trackableSubRing);
        }

        public static readonly PropertyInfo MainRingProperty = typeof(TrackableHand).GetProperty("MainRing");
        [ProtoMember(1)]
        public override TrackableData.Protobuf.Tests.Data.Ring MainRing
        {
            get
            {
                return base.MainRing;
            }
            set
            {
                if (Tracker != null && MainRing != value)
                    Tracker.TrackSet(MainRingProperty, base.MainRing, value);
                base.MainRing = value;
            }
        }

        public static readonly PropertyInfo SubRingProperty = typeof(TrackableHand).GetProperty("SubRing");
        [ProtoMember(2)]
        public override TrackableData.Protobuf.Tests.Data.Ring SubRing
        {
            get
            {
                return base.SubRing;
            }
            set
            {
                if (Tracker != null && SubRing != value)
                    Tracker.TrackSet(SubRingProperty, base.SubRing, value);
                base.SubRing = value;
            }
        }
    }

    [ProtoContract]
    public class TrackableHandTrackerSurrogate
    {
        [ProtoMember(1)] public EnvelopedObject<TrackableData.Protobuf.Tests.Data.Ring> MainRing;
        [ProtoMember(2)] public EnvelopedObject<TrackableData.Protobuf.Tests.Data.Ring> SubRing;

        public static implicit operator TrackableHandTrackerSurrogate(TrackablePocoTracker<Hand> tracker)
        {
            if (tracker == null)
                return null;

            var surrogate = new TrackableHandTrackerSurrogate();
            foreach(var changeItem in tracker.ChangeMap)
            {
                var tag = changeItem.Key.GetCustomAttribute<ProtoMemberAttribute>().Tag;
                switch (tag)
                {
                    case 1:
                        surrogate.MainRing = new EnvelopedObject<TrackableData.Protobuf.Tests.Data.Ring> { Value = (TrackableData.Protobuf.Tests.Data.Ring)changeItem.Value.NewValue };
                        break;
                    case 2:
                        surrogate.SubRing = new EnvelopedObject<TrackableData.Protobuf.Tests.Data.Ring> { Value = (TrackableData.Protobuf.Tests.Data.Ring)changeItem.Value.NewValue };
                        break;
                }
            }
            return surrogate;
        }

        public static implicit operator TrackablePocoTracker<Hand>(TrackableHandTrackerSurrogate surrogate)
        {
            if (surrogate == null)
                return null;

            var tracker = new TrackablePocoTracker<Hand>();
            if (surrogate.MainRing != null)
                tracker.ChangeMap.Add(TrackableHand.MainRingProperty, new TrackablePocoTracker<Hand>.Change { NewValue = surrogate.MainRing.Value });
            if (surrogate.SubRing != null)
                tracker.ChangeMap.Add(TrackableHand.SubRingProperty, new TrackablePocoTracker<Hand>.Change { NewValue = surrogate.SubRing.Value });
            return tracker;
        }
    }
}

#endregion

#region TrackableData.Protobuf.Tests.Data.Person

namespace TrackableData.Protobuf.Tests.Data
{
    [ProtoContract]
    public class TrackablePerson : Person, ITrackable<Person>
    {
        [IgnoreDataMember]
        public TrackablePocoTracker<Person> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<Person>)value;
                Tracker = t;
            }
        }

        ITracker<Person> ITrackable<Person>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<Person>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                case "LeftHand":
                    return LeftHand as ITrackable;
                case "RightHand":
                    return RightHand as ITrackable;
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            var trackableLeftHand = LeftHand as ITrackable;
            if (trackableLeftHand != null && (changedOnly == false || trackableLeftHand.Changed))
                yield return new KeyValuePair<object, ITrackable>("LeftHand", trackableLeftHand);
            var trackableRightHand = RightHand as ITrackable;
            if (trackableRightHand != null && (changedOnly == false || trackableRightHand.Changed))
                yield return new KeyValuePair<object, ITrackable>("RightHand", trackableRightHand);
        }

        public static readonly PropertyInfo AgeProperty = typeof(TrackablePerson).GetProperty("Age");
        [ProtoMember(2)]
        public override System.Int32 Age
        {
            get
            {
                return base.Age;
            }
            set
            {
                if (Tracker != null && Age != value)
                    Tracker.TrackSet(AgeProperty, base.Age, value);
                base.Age = value;
            }
        }

        public static readonly PropertyInfo LeftHandProperty = typeof(TrackablePerson).GetProperty("LeftHand");
        [ProtoMember(3)]
        public override TrackableData.Protobuf.Tests.Data.Hand LeftHand
        {
            get
            {
                return base.LeftHand;
            }
            set
            {
                if (Tracker != null && LeftHand != value)
                    Tracker.TrackSet(LeftHandProperty, base.LeftHand, value);
                base.LeftHand = value;
            }
        }

        public static readonly PropertyInfo NameProperty = typeof(TrackablePerson).GetProperty("Name");
        [ProtoMember(1)]
        public override System.String Name
        {
            get
            {
                return base.Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(NameProperty, base.Name, value);
                base.Name = value;
            }
        }

        public static readonly PropertyInfo RightHandProperty = typeof(TrackablePerson).GetProperty("RightHand");
        [ProtoMember(4)]
        public override TrackableData.Protobuf.Tests.Data.Hand RightHand
        {
            get
            {
                return base.RightHand;
            }
            set
            {
                if (Tracker != null && RightHand != value)
                    Tracker.TrackSet(RightHandProperty, base.RightHand, value);
                base.RightHand = value;
            }
        }
    }

    [ProtoContract]
    public class TrackablePersonTrackerSurrogate
    {
        [ProtoMember(1)] public EnvelopedObject<System.String> Name;
        [ProtoMember(2)] public System.Int32? Age;
        [ProtoMember(3)] public EnvelopedObject<TrackableData.Protobuf.Tests.Data.Hand> LeftHand;
        [ProtoMember(4)] public EnvelopedObject<TrackableData.Protobuf.Tests.Data.Hand> RightHand;

        public static implicit operator TrackablePersonTrackerSurrogate(TrackablePocoTracker<Person> tracker)
        {
            if (tracker == null)
                return null;

            var surrogate = new TrackablePersonTrackerSurrogate();
            foreach(var changeItem in tracker.ChangeMap)
            {
                var tag = changeItem.Key.GetCustomAttribute<ProtoMemberAttribute>().Tag;
                switch (tag)
                {
                    case 1:
                        surrogate.Name = new EnvelopedObject<System.String> { Value = (System.String)changeItem.Value.NewValue };
                        break;
                    case 2:
                        surrogate.Age = (System.Int32)changeItem.Value.NewValue;
                        break;
                    case 3:
                        surrogate.LeftHand = new EnvelopedObject<TrackableData.Protobuf.Tests.Data.Hand> { Value = (TrackableData.Protobuf.Tests.Data.Hand)changeItem.Value.NewValue };
                        break;
                    case 4:
                        surrogate.RightHand = new EnvelopedObject<TrackableData.Protobuf.Tests.Data.Hand> { Value = (TrackableData.Protobuf.Tests.Data.Hand)changeItem.Value.NewValue };
                        break;
                }
            }
            return surrogate;
        }

        public static implicit operator TrackablePocoTracker<Person>(TrackablePersonTrackerSurrogate surrogate)
        {
            if (surrogate == null)
                return null;

            var tracker = new TrackablePocoTracker<Person>();
            if (surrogate.Name != null)
                tracker.ChangeMap.Add(TrackablePerson.NameProperty, new TrackablePocoTracker<Person>.Change { NewValue = surrogate.Name.Value });
            if (surrogate.Age != null)
                tracker.ChangeMap.Add(TrackablePerson.AgeProperty, new TrackablePocoTracker<Person>.Change { NewValue = surrogate.Age.Value });
            if (surrogate.LeftHand != null)
                tracker.ChangeMap.Add(TrackablePerson.LeftHandProperty, new TrackablePocoTracker<Person>.Change { NewValue = surrogate.LeftHand.Value });
            if (surrogate.RightHand != null)
                tracker.ChangeMap.Add(TrackablePerson.RightHandProperty, new TrackablePocoTracker<Person>.Change { NewValue = surrogate.RightHand.Value });
            return tracker;
        }
    }
}

#endregion

#region TrackableData.Protobuf.Tests.Data.Ring

namespace TrackableData.Protobuf.Tests.Data
{
    [ProtoContract]
    public class TrackableRing : Ring, ITrackable<Ring>
    {
        [IgnoreDataMember]
        public TrackablePocoTracker<Ring> Tracker { get; set; }

        public bool Changed { get { return Tracker != null && Tracker.HasChange; } }

        ITracker ITrackable.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<Ring>)value;
                Tracker = t;
            }
        }

        ITracker<Ring> ITrackable<Ring>.Tracker
        {
            get
            {
                return Tracker;
            }
            set
            {
                var t = (TrackablePocoTracker<Ring>)value;
                Tracker = t;
            }
        }

        public ITrackable GetChildTrackable(object name)
        {
            switch ((string)name)
            {
                default:
                    return null;
            }
        }

        public IEnumerable<KeyValuePair<object, ITrackable>> GetChildTrackables(bool changedOnly = false)
        {
            yield break;
        }

        public static readonly PropertyInfo NameProperty = typeof(TrackableRing).GetProperty("Name");
        [ProtoMember(1)]
        public override System.String Name
        {
            get
            {
                return base.Name;
            }
            set
            {
                if (Tracker != null && Name != value)
                    Tracker.TrackSet(NameProperty, base.Name, value);
                base.Name = value;
            }
        }

        public static readonly PropertyInfo PowerProperty = typeof(TrackableRing).GetProperty("Power");
        [ProtoMember(2)]
        public override System.Int32 Power
        {
            get
            {
                return base.Power;
            }
            set
            {
                if (Tracker != null && Power != value)
                    Tracker.TrackSet(PowerProperty, base.Power, value);
                base.Power = value;
            }
        }
    }

    [ProtoContract]
    public class TrackableRingTrackerSurrogate
    {
        [ProtoMember(1)] public EnvelopedObject<System.String> Name;
        [ProtoMember(2)] public System.Int32? Power;

        public static implicit operator TrackableRingTrackerSurrogate(TrackablePocoTracker<Ring> tracker)
        {
            if (tracker == null)
                return null;

            var surrogate = new TrackableRingTrackerSurrogate();
            foreach(var changeItem in tracker.ChangeMap)
            {
                var tag = changeItem.Key.GetCustomAttribute<ProtoMemberAttribute>().Tag;
                switch (tag)
                {
                    case 1:
                        surrogate.Name = new EnvelopedObject<System.String> { Value = (System.String)changeItem.Value.NewValue };
                        break;
                    case 2:
                        surrogate.Power = (System.Int32)changeItem.Value.NewValue;
                        break;
                }
            }
            return surrogate;
        }

        public static implicit operator TrackablePocoTracker<Ring>(TrackableRingTrackerSurrogate surrogate)
        {
            if (surrogate == null)
                return null;

            var tracker = new TrackablePocoTracker<Ring>();
            if (surrogate.Name != null)
                tracker.ChangeMap.Add(TrackableRing.NameProperty, new TrackablePocoTracker<Ring>.Change { NewValue = surrogate.Name.Value });
            if (surrogate.Power != null)
                tracker.ChangeMap.Add(TrackableRing.PowerProperty, new TrackablePocoTracker<Ring>.Change { NewValue = surrogate.Power.Value });
            return tracker;
        }
    }
}

#endregion
